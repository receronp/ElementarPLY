Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    BTAND
    BTNOT
    BTOR
    COMMENT
    DOT
    FUR
    NOT
    QUOTE
    newline

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAMM V R B SCHLUSS
Rule 2     V -> V0 V
Rule 3     V -> <empty>
Rule 4     V0 -> DIM ID V1
Rule 5     V0 -> DIM ID V2
Rule 6     V1 -> COMMA ID V1
Rule 7     V1 -> COMMA ID V2
Rule 8     V2 -> ALS TYPE AMC0
Rule 9     R -> R0 COLON B RUKKHER R
Rule 10    R -> <empty>
Rule 11    R0 -> SUB ID
Rule 12    B -> BEGIN S
Rule 13    S -> S0 S
Rule 14    S -> <empty>
Rule 15    S0 -> IDORAMC ASSIGN E
Rule 16    S0 -> EIN LPAREN IDORAMC INPUT RPAREN
Rule 17    S0 -> AUS LPAREN E OUTPUT RPAREN
Rule 18    S0 -> GSUB ID
Rule 19    S0 -> WENN CONDITION DANN S SW SD ENDE
Rule 20    S0 -> WAHREND CONDITION S ENDE
Rule 21    S0 -> TUN S WAHREND CONDITION
Rule 22    S0 -> <empty>
Rule 23    IDORAMC -> ID
Rule 24    IDORAMC -> ID AMC1
Rule 25    EIDORAMC -> ID
Rule 26    EIDORAMC -> ID AMC1
Rule 27    CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN
Rule 28    CONDITION -> CONDITION AND CONDITION
Rule 29    CONDITION -> CONDITION OR CONDITION
Rule 30    CMP -> VALUE
Rule 31    CMP -> IDORAMC
Rule 32    CMP -> FLT
Rule 33    COMPARATOR -> GT
Rule 34    COMPARATOR -> GE
Rule 35    COMPARATOR -> EQ
Rule 36    COMPARATOR -> NE
Rule 37    COMPARATOR -> LE
Rule 38    COMPARATOR -> LT
Rule 39    SW -> SWENN CONDITION DANN S SW
Rule 40    SW -> <empty>
Rule 41    SD -> SONNST DANN S
Rule 42    SD -> <empty>
Rule 43    E -> VALUE
Rule 44    E -> FLT
Rule 45    E -> STR
Rule 46    E -> EIDORAMC
Rule 47    E -> VALUE OPERATOR E
Rule 48    E -> FLT OPERATOR E
Rule 49    E -> STR OPERATOR E
Rule 50    E -> IDORAMC OPERATOR E
Rule 51    OPERATOR -> PLUS
Rule 52    OPERATOR -> TIMES
Rule 53    OPERATOR -> MINUS
Rule 54    OPERATOR -> DIVIDE
Rule 55    OPERATOR -> MODULO
Rule 56    INPUT -> COMMA IDORAMC INPUT
Rule 57    INPUT -> <empty>
Rule 58    OUTPUT -> COMMA E OUTPUT
Rule 59    OUTPUT -> <empty>
Rule 60    TYPE -> WORD
Rule 61    TYPE -> FLOAT
Rule 62    TYPE -> STRING
Rule 63    AMC0 -> AMC1
Rule 64    AMC0 -> <empty>
Rule 65    AMC1 -> LBRKT VALUE RBRKT AMC2
Rule 66    AMC1 -> LBRKT ID RBRKT AMC2
Rule 67    AMC1 -> LBRKT VALUE RBRKT
Rule 68    AMC1 -> LBRKT ID RBRKT
Rule 69    AMC1 -> <empty>
Rule 70    AMC2 -> LBRKT VALUE RBRKT AMC3
Rule 71    AMC2 -> LBRKT ID RBRKT AMC3
Rule 72    AMC2 -> LBRKT VALUE RBRKT
Rule 73    AMC2 -> LBRKT ID RBRKT
Rule 74    AMC2 -> <empty>
Rule 75    AMC3 -> LBRKT VALUE RBRKT
Rule 76    AMC3 -> LBRKT ID RBRKT
Rule 77    AMC3 -> <empty>

Terminals, with rules where they appear

ALS                  : 8
AND                  : 28
ASSIGN               : 15
AUS                  : 17
BEGIN                : 12
BREAK                : 
BTAND                : 
BTNOT                : 
BTOR                 : 
COLON                : 9
COMMA                : 6 7 56 58
COMMENT              : 
DANN                 : 19 39 41
DIM                  : 4 5
DIVIDE               : 54
DOT                  : 
EIN                  : 16
ENDE                 : 19 20
EQ                   : 35
FLOAT                : 61
FLT                  : 32 44 48
FUR                  : 
GE                   : 34
GSUB                 : 18
GT                   : 33
ID                   : 4 5 6 7 11 18 23 24 25 26 66 68 71 73 76
LBRKT                : 65 66 67 68 70 71 72 73 75 76
LE                   : 37
LPAREN               : 16 17 27
LT                   : 38
MINUS                : 53
MODULO               : 55
NE                   : 36
NOT                  : 
OR                   : 29
PLUS                 : 51
PROGRAMM             : 1
QUOTE                : 
RBRKT                : 65 66 67 68 70 71 72 73 75 76
RPAREN               : 16 17 27
RUKKHER              : 9
SCHLUSS              : 1
SONNST               : 41
STR                  : 45 49
STRING               : 62
SUB                  : 11
SWENN                : 39
TIMES                : 52
TUN                  : 21
VALUE                : 30 43 47 65 67 70 72 75
WAHREND              : 20 21
WENN                 : 19
WORD                 : 60
error                : 
newline              : 

Nonterminals, with rules where they appear

AMC0                 : 8
AMC1                 : 24 26 63
AMC2                 : 65 66
AMC3                 : 70 71
B                    : 1 9
CMP                  : 27 27
COMPARATOR           : 27
CONDITION            : 19 20 21 28 28 29 29 39
E                    : 15 17 47 48 49 50 58
EIDORAMC             : 46
IDORAMC              : 15 16 31 50 56
INPUT                : 16 56
OPERATOR             : 47 48 49 50
OUTPUT               : 17 58
R                    : 1 9
R0                   : 9
S                    : 12 13 19 20 21 39 41
S0                   : 13
SD                   : 19
SW                   : 19 39
TYPE                 : 8
V                    : 1 2
V0                   : 2
V1                   : 4 6
V2                   : 5 7
program              : 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAMM V R B SCHLUSS

    PROGRAMM        shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAMM . V R B SCHLUSS
    (2) V -> . V0 V
    (3) V -> .
    (4) V0 -> . DIM ID V1
    (5) V0 -> . DIM ID V2

    SUB             reduce using rule 3 (V -> .)
    BEGIN           reduce using rule 3 (V -> .)
    DIM             shift and go to state 5

    V                              shift and go to state 3
    V0                             shift and go to state 4

state 3

    (1) program -> PROGRAMM V . R B SCHLUSS
    (9) R -> . R0 COLON B RUKKHER R
    (10) R -> .
    (11) R0 -> . SUB ID

    BEGIN           reduce using rule 10 (R -> .)
    SUB             shift and go to state 8

    R                              shift and go to state 6
    R0                             shift and go to state 7

state 4

    (2) V -> V0 . V
    (2) V -> . V0 V
    (3) V -> .
    (4) V0 -> . DIM ID V1
    (5) V0 -> . DIM ID V2

    SUB             reduce using rule 3 (V -> .)
    BEGIN           reduce using rule 3 (V -> .)
    DIM             shift and go to state 5

    V0                             shift and go to state 4
    V                              shift and go to state 9

state 5

    (4) V0 -> DIM . ID V1
    (5) V0 -> DIM . ID V2

    ID              shift and go to state 10


state 6

    (1) program -> PROGRAMM V R . B SCHLUSS
    (12) B -> . BEGIN S

    BEGIN           shift and go to state 12

    B                              shift and go to state 11

state 7

    (9) R -> R0 . COLON B RUKKHER R

    COLON           shift and go to state 13


state 8

    (11) R0 -> SUB . ID

    ID              shift and go to state 14


state 9

    (2) V -> V0 V .

    SUB             reduce using rule 2 (V -> V0 V .)
    BEGIN           reduce using rule 2 (V -> V0 V .)


state 10

    (4) V0 -> DIM ID . V1
    (5) V0 -> DIM ID . V2
    (6) V1 -> . COMMA ID V1
    (7) V1 -> . COMMA ID V2
    (8) V2 -> . ALS TYPE AMC0

    COMMA           shift and go to state 17
    ALS             shift and go to state 18

    V1                             shift and go to state 15
    V2                             shift and go to state 16

state 11

    (1) program -> PROGRAMM V R B . SCHLUSS

    SCHLUSS         shift and go to state 19


state 12

    (12) B -> BEGIN . S
    (13) S -> . S0 S
    (14) S -> .
    (15) S0 -> . IDORAMC ASSIGN E
    (16) S0 -> . EIN LPAREN IDORAMC INPUT RPAREN
    (17) S0 -> . AUS LPAREN E OUTPUT RPAREN
    (18) S0 -> . GSUB ID
    (19) S0 -> . WENN CONDITION DANN S SW SD ENDE
    (20) S0 -> . WAHREND CONDITION S ENDE
    (21) S0 -> . TUN S WAHREND CONDITION
    (22) S0 -> .
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

  ! shift/reduce conflict for EIN resolved as shift
  ! shift/reduce conflict for AUS resolved as shift
  ! shift/reduce conflict for GSUB resolved as shift
  ! shift/reduce conflict for WENN resolved as shift
  ! shift/reduce conflict for WAHREND resolved as shift
  ! shift/reduce conflict for TUN resolved as shift
  ! reduce/reduce conflict for SCHLUSS resolved using rule 14 (S -> .)
  ! reduce/reduce conflict for RUKKHER resolved using rule 14 (S -> .)
  ! shift/reduce conflict for ID resolved as shift
    SCHLUSS         reduce using rule 14 (S -> .)
    RUKKHER         reduce using rule 14 (S -> .)
    EIN             shift and go to state 23
    AUS             shift and go to state 24
    GSUB            shift and go to state 25
    WENN            shift and go to state 27
    WAHREND         shift and go to state 28
    TUN             shift and go to state 29
    ID              shift and go to state 26

  ! EIN             [ reduce using rule 22 (S0 -> .) ]
  ! AUS             [ reduce using rule 22 (S0 -> .) ]
  ! GSUB            [ reduce using rule 22 (S0 -> .) ]
  ! WENN            [ reduce using rule 22 (S0 -> .) ]
  ! WAHREND         [ reduce using rule 22 (S0 -> .) ]
  ! TUN             [ reduce using rule 22 (S0 -> .) ]
  ! ID              [ reduce using rule 22 (S0 -> .) ]
  ! SCHLUSS         [ reduce using rule 22 (S0 -> .) ]
  ! RUKKHER         [ reduce using rule 22 (S0 -> .) ]

    S                              shift and go to state 20
    S0                             shift and go to state 21
    IDORAMC                        shift and go to state 22

state 13

    (9) R -> R0 COLON . B RUKKHER R
    (12) B -> . BEGIN S

    BEGIN           shift and go to state 12

    B                              shift and go to state 30

state 14

    (11) R0 -> SUB ID .

    COLON           reduce using rule 11 (R0 -> SUB ID .)


state 15

    (4) V0 -> DIM ID V1 .

    DIM             reduce using rule 4 (V0 -> DIM ID V1 .)
    SUB             reduce using rule 4 (V0 -> DIM ID V1 .)
    BEGIN           reduce using rule 4 (V0 -> DIM ID V1 .)


state 16

    (5) V0 -> DIM ID V2 .

    DIM             reduce using rule 5 (V0 -> DIM ID V2 .)
    SUB             reduce using rule 5 (V0 -> DIM ID V2 .)
    BEGIN           reduce using rule 5 (V0 -> DIM ID V2 .)


state 17

    (6) V1 -> COMMA . ID V1
    (7) V1 -> COMMA . ID V2

    ID              shift and go to state 31


state 18

    (8) V2 -> ALS . TYPE AMC0
    (60) TYPE -> . WORD
    (61) TYPE -> . FLOAT
    (62) TYPE -> . STRING

    WORD            shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 35

    TYPE                           shift and go to state 32

state 19

    (1) program -> PROGRAMM V R B SCHLUSS .

    $end            reduce using rule 1 (program -> PROGRAMM V R B SCHLUSS .)


state 20

    (12) B -> BEGIN S .

    SCHLUSS         reduce using rule 12 (B -> BEGIN S .)
    RUKKHER         reduce using rule 12 (B -> BEGIN S .)


state 21

    (13) S -> S0 . S
    (13) S -> . S0 S
    (14) S -> .
    (15) S0 -> . IDORAMC ASSIGN E
    (16) S0 -> . EIN LPAREN IDORAMC INPUT RPAREN
    (17) S0 -> . AUS LPAREN E OUTPUT RPAREN
    (18) S0 -> . GSUB ID
    (19) S0 -> . WENN CONDITION DANN S SW SD ENDE
    (20) S0 -> . WAHREND CONDITION S ENDE
    (21) S0 -> . TUN S WAHREND CONDITION
    (22) S0 -> .
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

  ! shift/reduce conflict for WAHREND resolved as shift
  ! shift/reduce conflict for EIN resolved as shift
  ! shift/reduce conflict for AUS resolved as shift
  ! shift/reduce conflict for GSUB resolved as shift
  ! shift/reduce conflict for WENN resolved as shift
  ! shift/reduce conflict for WAHREND resolved as shift
  ! shift/reduce conflict for TUN resolved as shift
  ! reduce/reduce conflict for SCHLUSS resolved using rule 14 (S -> .)
  ! reduce/reduce conflict for RUKKHER resolved using rule 14 (S -> .)
  ! reduce/reduce conflict for ENDE resolved using rule 14 (S -> .)
  ! reduce/reduce conflict for SWENN resolved using rule 14 (S -> .)
  ! reduce/reduce conflict for SONNST resolved using rule 14 (S -> .)
  ! shift/reduce conflict for ID resolved as shift
    SCHLUSS         reduce using rule 14 (S -> .)
    RUKKHER         reduce using rule 14 (S -> .)
    ENDE            reduce using rule 14 (S -> .)
    SWENN           reduce using rule 14 (S -> .)
    SONNST          reduce using rule 14 (S -> .)
    EIN             shift and go to state 23
    AUS             shift and go to state 24
    GSUB            shift and go to state 25
    WENN            shift and go to state 27
    WAHREND         shift and go to state 28
    TUN             shift and go to state 29
    ID              shift and go to state 26

  ! WAHREND         [ reduce using rule 14 (S -> .) ]
  ! EIN             [ reduce using rule 22 (S0 -> .) ]
  ! AUS             [ reduce using rule 22 (S0 -> .) ]
  ! GSUB            [ reduce using rule 22 (S0 -> .) ]
  ! WENN            [ reduce using rule 22 (S0 -> .) ]
  ! WAHREND         [ reduce using rule 22 (S0 -> .) ]
  ! TUN             [ reduce using rule 22 (S0 -> .) ]
  ! ID              [ reduce using rule 22 (S0 -> .) ]
  ! SCHLUSS         [ reduce using rule 22 (S0 -> .) ]
  ! RUKKHER         [ reduce using rule 22 (S0 -> .) ]
  ! ENDE            [ reduce using rule 22 (S0 -> .) ]
  ! SWENN           [ reduce using rule 22 (S0 -> .) ]
  ! SONNST          [ reduce using rule 22 (S0 -> .) ]

    S0                             shift and go to state 21
    S                              shift and go to state 36
    IDORAMC                        shift and go to state 22

state 22

    (15) S0 -> IDORAMC . ASSIGN E

    ASSIGN          shift and go to state 37


state 23

    (16) S0 -> EIN . LPAREN IDORAMC INPUT RPAREN

    LPAREN          shift and go to state 38


state 24

    (17) S0 -> AUS . LPAREN E OUTPUT RPAREN

    LPAREN          shift and go to state 39


state 25

    (18) S0 -> GSUB . ID

    ID              shift and go to state 40


state 26

    (23) IDORAMC -> ID .
    (24) IDORAMC -> ID . AMC1
    (65) AMC1 -> . LBRKT VALUE RBRKT AMC2
    (66) AMC1 -> . LBRKT ID RBRKT AMC2
    (67) AMC1 -> . LBRKT VALUE RBRKT
    (68) AMC1 -> . LBRKT ID RBRKT
    (69) AMC1 -> .

  ! reduce/reduce conflict for ASSIGN resolved using rule 23 (IDORAMC -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 23 (IDORAMC -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 23 (IDORAMC -> ID .)
  ! reduce/reduce conflict for GT resolved using rule 23 (IDORAMC -> ID .)
  ! reduce/reduce conflict for GE resolved using rule 23 (IDORAMC -> ID .)
  ! reduce/reduce conflict for EQ resolved using rule 23 (IDORAMC -> ID .)
  ! reduce/reduce conflict for NE resolved using rule 23 (IDORAMC -> ID .)
  ! reduce/reduce conflict for LE resolved using rule 23 (IDORAMC -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 23 (IDORAMC -> ID .)
    ASSIGN          reduce using rule 23 (IDORAMC -> ID .)
    COMMA           reduce using rule 23 (IDORAMC -> ID .)
    RPAREN          reduce using rule 23 (IDORAMC -> ID .)
    GT              reduce using rule 23 (IDORAMC -> ID .)
    GE              reduce using rule 23 (IDORAMC -> ID .)
    EQ              reduce using rule 23 (IDORAMC -> ID .)
    NE              reduce using rule 23 (IDORAMC -> ID .)
    LE              reduce using rule 23 (IDORAMC -> ID .)
    LT              reduce using rule 23 (IDORAMC -> ID .)
    LBRKT           shift and go to state 42

  ! ASSIGN          [ reduce using rule 69 (AMC1 -> .) ]
  ! COMMA           [ reduce using rule 69 (AMC1 -> .) ]
  ! RPAREN          [ reduce using rule 69 (AMC1 -> .) ]
  ! GT              [ reduce using rule 69 (AMC1 -> .) ]
  ! GE              [ reduce using rule 69 (AMC1 -> .) ]
  ! EQ              [ reduce using rule 69 (AMC1 -> .) ]
  ! NE              [ reduce using rule 69 (AMC1 -> .) ]
  ! LE              [ reduce using rule 69 (AMC1 -> .) ]
  ! LT              [ reduce using rule 69 (AMC1 -> .) ]

    AMC1                           shift and go to state 41

state 27

    (19) S0 -> WENN . CONDITION DANN S SW SD ENDE
    (27) CONDITION -> . LPAREN CMP COMPARATOR CMP RPAREN
    (28) CONDITION -> . CONDITION AND CONDITION
    (29) CONDITION -> . CONDITION OR CONDITION

    LPAREN          shift and go to state 44

    CONDITION                      shift and go to state 43

state 28

    (20) S0 -> WAHREND . CONDITION S ENDE
    (27) CONDITION -> . LPAREN CMP COMPARATOR CMP RPAREN
    (28) CONDITION -> . CONDITION AND CONDITION
    (29) CONDITION -> . CONDITION OR CONDITION

    LPAREN          shift and go to state 44

    CONDITION                      shift and go to state 45

state 29

    (21) S0 -> TUN . S WAHREND CONDITION
    (13) S -> . S0 S
    (14) S -> .
    (15) S0 -> . IDORAMC ASSIGN E
    (16) S0 -> . EIN LPAREN IDORAMC INPUT RPAREN
    (17) S0 -> . AUS LPAREN E OUTPUT RPAREN
    (18) S0 -> . GSUB ID
    (19) S0 -> . WENN CONDITION DANN S SW SD ENDE
    (20) S0 -> . WAHREND CONDITION S ENDE
    (21) S0 -> . TUN S WAHREND CONDITION
    (22) S0 -> .
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

  ! shift/reduce conflict for WAHREND resolved as shift
  ! shift/reduce conflict for EIN resolved as shift
  ! shift/reduce conflict for AUS resolved as shift
  ! shift/reduce conflict for GSUB resolved as shift
  ! shift/reduce conflict for WENN resolved as shift
  ! shift/reduce conflict for WAHREND resolved as shift
  ! shift/reduce conflict for TUN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    EIN             shift and go to state 23
    AUS             shift and go to state 24
    GSUB            shift and go to state 25
    WENN            shift and go to state 27
    WAHREND         shift and go to state 28
    TUN             shift and go to state 29
    ID              shift and go to state 26

  ! WAHREND         [ reduce using rule 14 (S -> .) ]
  ! EIN             [ reduce using rule 22 (S0 -> .) ]
  ! AUS             [ reduce using rule 22 (S0 -> .) ]
  ! GSUB            [ reduce using rule 22 (S0 -> .) ]
  ! WENN            [ reduce using rule 22 (S0 -> .) ]
  ! WAHREND         [ reduce using rule 22 (S0 -> .) ]
  ! TUN             [ reduce using rule 22 (S0 -> .) ]
  ! ID              [ reduce using rule 22 (S0 -> .) ]

    S                              shift and go to state 46
    S0                             shift and go to state 21
    IDORAMC                        shift and go to state 22

state 30

    (9) R -> R0 COLON B . RUKKHER R

    RUKKHER         shift and go to state 47


state 31

    (6) V1 -> COMMA ID . V1
    (7) V1 -> COMMA ID . V2
    (6) V1 -> . COMMA ID V1
    (7) V1 -> . COMMA ID V2
    (8) V2 -> . ALS TYPE AMC0

    COMMA           shift and go to state 17
    ALS             shift and go to state 18

    V1                             shift and go to state 48
    V2                             shift and go to state 49

state 32

    (8) V2 -> ALS TYPE . AMC0
    (63) AMC0 -> . AMC1
    (64) AMC0 -> .
    (65) AMC1 -> . LBRKT VALUE RBRKT AMC2
    (66) AMC1 -> . LBRKT ID RBRKT AMC2
    (67) AMC1 -> . LBRKT VALUE RBRKT
    (68) AMC1 -> . LBRKT ID RBRKT
    (69) AMC1 -> .

  ! reduce/reduce conflict for DIM resolved using rule 64 (AMC0 -> .)
  ! reduce/reduce conflict for SUB resolved using rule 64 (AMC0 -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 64 (AMC0 -> .)
    DIM             reduce using rule 64 (AMC0 -> .)
    SUB             reduce using rule 64 (AMC0 -> .)
    BEGIN           reduce using rule 64 (AMC0 -> .)
    LBRKT           shift and go to state 42

  ! DIM             [ reduce using rule 69 (AMC1 -> .) ]
  ! SUB             [ reduce using rule 69 (AMC1 -> .) ]
  ! BEGIN           [ reduce using rule 69 (AMC1 -> .) ]

    AMC0                           shift and go to state 50
    AMC1                           shift and go to state 51

state 33

    (60) TYPE -> WORD .

    LBRKT           reduce using rule 60 (TYPE -> WORD .)
    DIM             reduce using rule 60 (TYPE -> WORD .)
    SUB             reduce using rule 60 (TYPE -> WORD .)
    BEGIN           reduce using rule 60 (TYPE -> WORD .)


state 34

    (61) TYPE -> FLOAT .

    LBRKT           reduce using rule 61 (TYPE -> FLOAT .)
    DIM             reduce using rule 61 (TYPE -> FLOAT .)
    SUB             reduce using rule 61 (TYPE -> FLOAT .)
    BEGIN           reduce using rule 61 (TYPE -> FLOAT .)


state 35

    (62) TYPE -> STRING .

    LBRKT           reduce using rule 62 (TYPE -> STRING .)
    DIM             reduce using rule 62 (TYPE -> STRING .)
    SUB             reduce using rule 62 (TYPE -> STRING .)
    BEGIN           reduce using rule 62 (TYPE -> STRING .)


state 36

    (13) S -> S0 S .

    SCHLUSS         reduce using rule 13 (S -> S0 S .)
    RUKKHER         reduce using rule 13 (S -> S0 S .)
    WAHREND         reduce using rule 13 (S -> S0 S .)
    ENDE            reduce using rule 13 (S -> S0 S .)
    SWENN           reduce using rule 13 (S -> S0 S .)
    SONNST          reduce using rule 13 (S -> S0 S .)


state 37

    (15) S0 -> IDORAMC ASSIGN . E
    (43) E -> . VALUE
    (44) E -> . FLT
    (45) E -> . STR
    (46) E -> . EIDORAMC
    (47) E -> . VALUE OPERATOR E
    (48) E -> . FLT OPERATOR E
    (49) E -> . STR OPERATOR E
    (50) E -> . IDORAMC OPERATOR E
    (25) EIDORAMC -> . ID
    (26) EIDORAMC -> . ID AMC1
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

    VALUE           shift and go to state 54
    FLT             shift and go to state 55
    STR             shift and go to state 56
    ID              shift and go to state 58

    IDORAMC                        shift and go to state 52
    E                              shift and go to state 53
    EIDORAMC                       shift and go to state 57

state 38

    (16) S0 -> EIN LPAREN . IDORAMC INPUT RPAREN
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

    ID              shift and go to state 26

    IDORAMC                        shift and go to state 59

state 39

    (17) S0 -> AUS LPAREN . E OUTPUT RPAREN
    (43) E -> . VALUE
    (44) E -> . FLT
    (45) E -> . STR
    (46) E -> . EIDORAMC
    (47) E -> . VALUE OPERATOR E
    (48) E -> . FLT OPERATOR E
    (49) E -> . STR OPERATOR E
    (50) E -> . IDORAMC OPERATOR E
    (25) EIDORAMC -> . ID
    (26) EIDORAMC -> . ID AMC1
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

    VALUE           shift and go to state 54
    FLT             shift and go to state 55
    STR             shift and go to state 56
    ID              shift and go to state 58

    E                              shift and go to state 60
    EIDORAMC                       shift and go to state 57
    IDORAMC                        shift and go to state 52

state 40

    (18) S0 -> GSUB ID .

    EIN             reduce using rule 18 (S0 -> GSUB ID .)
    AUS             reduce using rule 18 (S0 -> GSUB ID .)
    GSUB            reduce using rule 18 (S0 -> GSUB ID .)
    WENN            reduce using rule 18 (S0 -> GSUB ID .)
    WAHREND         reduce using rule 18 (S0 -> GSUB ID .)
    TUN             reduce using rule 18 (S0 -> GSUB ID .)
    ID              reduce using rule 18 (S0 -> GSUB ID .)
    SCHLUSS         reduce using rule 18 (S0 -> GSUB ID .)
    RUKKHER         reduce using rule 18 (S0 -> GSUB ID .)
    ENDE            reduce using rule 18 (S0 -> GSUB ID .)
    SWENN           reduce using rule 18 (S0 -> GSUB ID .)
    SONNST          reduce using rule 18 (S0 -> GSUB ID .)


state 41

    (24) IDORAMC -> ID AMC1 .

    ASSIGN          reduce using rule 24 (IDORAMC -> ID AMC1 .)
    COMMA           reduce using rule 24 (IDORAMC -> ID AMC1 .)
    RPAREN          reduce using rule 24 (IDORAMC -> ID AMC1 .)
    GT              reduce using rule 24 (IDORAMC -> ID AMC1 .)
    GE              reduce using rule 24 (IDORAMC -> ID AMC1 .)
    EQ              reduce using rule 24 (IDORAMC -> ID AMC1 .)
    NE              reduce using rule 24 (IDORAMC -> ID AMC1 .)
    LE              reduce using rule 24 (IDORAMC -> ID AMC1 .)
    LT              reduce using rule 24 (IDORAMC -> ID AMC1 .)


state 42

    (65) AMC1 -> LBRKT . VALUE RBRKT AMC2
    (66) AMC1 -> LBRKT . ID RBRKT AMC2
    (67) AMC1 -> LBRKT . VALUE RBRKT
    (68) AMC1 -> LBRKT . ID RBRKT

    VALUE           shift and go to state 61
    ID              shift and go to state 62


state 43

    (19) S0 -> WENN CONDITION . DANN S SW SD ENDE
    (28) CONDITION -> CONDITION . AND CONDITION
    (29) CONDITION -> CONDITION . OR CONDITION

    DANN            shift and go to state 63
    AND             shift and go to state 64
    OR              shift and go to state 65


state 44

    (27) CONDITION -> LPAREN . CMP COMPARATOR CMP RPAREN
    (30) CMP -> . VALUE
    (31) CMP -> . IDORAMC
    (32) CMP -> . FLT
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

    VALUE           shift and go to state 67
    FLT             shift and go to state 69
    ID              shift and go to state 26

    CMP                            shift and go to state 66
    IDORAMC                        shift and go to state 68

state 45

    (20) S0 -> WAHREND CONDITION . S ENDE
    (28) CONDITION -> CONDITION . AND CONDITION
    (29) CONDITION -> CONDITION . OR CONDITION
    (13) S -> . S0 S
    (14) S -> .
    (15) S0 -> . IDORAMC ASSIGN E
    (16) S0 -> . EIN LPAREN IDORAMC INPUT RPAREN
    (17) S0 -> . AUS LPAREN E OUTPUT RPAREN
    (18) S0 -> . GSUB ID
    (19) S0 -> . WENN CONDITION DANN S SW SD ENDE
    (20) S0 -> . WAHREND CONDITION S ENDE
    (21) S0 -> . TUN S WAHREND CONDITION
    (22) S0 -> .
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

  ! shift/reduce conflict for EIN resolved as shift
  ! shift/reduce conflict for AUS resolved as shift
  ! shift/reduce conflict for GSUB resolved as shift
  ! shift/reduce conflict for WENN resolved as shift
  ! shift/reduce conflict for WAHREND resolved as shift
  ! shift/reduce conflict for TUN resolved as shift
  ! reduce/reduce conflict for ENDE resolved using rule 14 (S -> .)
  ! shift/reduce conflict for ID resolved as shift
    AND             shift and go to state 64
    OR              shift and go to state 65
    ENDE            reduce using rule 14 (S -> .)
    EIN             shift and go to state 23
    AUS             shift and go to state 24
    GSUB            shift and go to state 25
    WENN            shift and go to state 27
    WAHREND         shift and go to state 28
    TUN             shift and go to state 29
    ID              shift and go to state 26

  ! EIN             [ reduce using rule 22 (S0 -> .) ]
  ! AUS             [ reduce using rule 22 (S0 -> .) ]
  ! GSUB            [ reduce using rule 22 (S0 -> .) ]
  ! WENN            [ reduce using rule 22 (S0 -> .) ]
  ! WAHREND         [ reduce using rule 22 (S0 -> .) ]
  ! TUN             [ reduce using rule 22 (S0 -> .) ]
  ! ID              [ reduce using rule 22 (S0 -> .) ]
  ! ENDE            [ reduce using rule 22 (S0 -> .) ]

    S                              shift and go to state 70
    S0                             shift and go to state 21
    IDORAMC                        shift and go to state 22

state 46

    (21) S0 -> TUN S . WAHREND CONDITION

    WAHREND         shift and go to state 71


state 47

    (9) R -> R0 COLON B RUKKHER . R
    (9) R -> . R0 COLON B RUKKHER R
    (10) R -> .
    (11) R0 -> . SUB ID

    BEGIN           reduce using rule 10 (R -> .)
    SUB             shift and go to state 8

    R0                             shift and go to state 7
    R                              shift and go to state 72

state 48

    (6) V1 -> COMMA ID V1 .

    DIM             reduce using rule 6 (V1 -> COMMA ID V1 .)
    SUB             reduce using rule 6 (V1 -> COMMA ID V1 .)
    BEGIN           reduce using rule 6 (V1 -> COMMA ID V1 .)


state 49

    (7) V1 -> COMMA ID V2 .

    DIM             reduce using rule 7 (V1 -> COMMA ID V2 .)
    SUB             reduce using rule 7 (V1 -> COMMA ID V2 .)
    BEGIN           reduce using rule 7 (V1 -> COMMA ID V2 .)


state 50

    (8) V2 -> ALS TYPE AMC0 .

    DIM             reduce using rule 8 (V2 -> ALS TYPE AMC0 .)
    SUB             reduce using rule 8 (V2 -> ALS TYPE AMC0 .)
    BEGIN           reduce using rule 8 (V2 -> ALS TYPE AMC0 .)


state 51

    (63) AMC0 -> AMC1 .

    DIM             reduce using rule 63 (AMC0 -> AMC1 .)
    SUB             reduce using rule 63 (AMC0 -> AMC1 .)
    BEGIN           reduce using rule 63 (AMC0 -> AMC1 .)


state 52

    (50) E -> IDORAMC . OPERATOR E
    (51) OPERATOR -> . PLUS
    (52) OPERATOR -> . TIMES
    (53) OPERATOR -> . MINUS
    (54) OPERATOR -> . DIVIDE
    (55) OPERATOR -> . MODULO

    PLUS            shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76
    DIVIDE          shift and go to state 77
    MODULO          shift and go to state 78

    OPERATOR                       shift and go to state 73

state 53

    (15) S0 -> IDORAMC ASSIGN E .

    EIN             reduce using rule 15 (S0 -> IDORAMC ASSIGN E .)
    AUS             reduce using rule 15 (S0 -> IDORAMC ASSIGN E .)
    GSUB            reduce using rule 15 (S0 -> IDORAMC ASSIGN E .)
    WENN            reduce using rule 15 (S0 -> IDORAMC ASSIGN E .)
    WAHREND         reduce using rule 15 (S0 -> IDORAMC ASSIGN E .)
    TUN             reduce using rule 15 (S0 -> IDORAMC ASSIGN E .)
    ID              reduce using rule 15 (S0 -> IDORAMC ASSIGN E .)
    SCHLUSS         reduce using rule 15 (S0 -> IDORAMC ASSIGN E .)
    RUKKHER         reduce using rule 15 (S0 -> IDORAMC ASSIGN E .)
    ENDE            reduce using rule 15 (S0 -> IDORAMC ASSIGN E .)
    SWENN           reduce using rule 15 (S0 -> IDORAMC ASSIGN E .)
    SONNST          reduce using rule 15 (S0 -> IDORAMC ASSIGN E .)


state 54

    (43) E -> VALUE .
    (47) E -> VALUE . OPERATOR E
    (51) OPERATOR -> . PLUS
    (52) OPERATOR -> . TIMES
    (53) OPERATOR -> . MINUS
    (54) OPERATOR -> . DIVIDE
    (55) OPERATOR -> . MODULO

    EIN             reduce using rule 43 (E -> VALUE .)
    AUS             reduce using rule 43 (E -> VALUE .)
    GSUB            reduce using rule 43 (E -> VALUE .)
    WENN            reduce using rule 43 (E -> VALUE .)
    WAHREND         reduce using rule 43 (E -> VALUE .)
    TUN             reduce using rule 43 (E -> VALUE .)
    ID              reduce using rule 43 (E -> VALUE .)
    SCHLUSS         reduce using rule 43 (E -> VALUE .)
    RUKKHER         reduce using rule 43 (E -> VALUE .)
    ENDE            reduce using rule 43 (E -> VALUE .)
    SWENN           reduce using rule 43 (E -> VALUE .)
    SONNST          reduce using rule 43 (E -> VALUE .)
    COMMA           reduce using rule 43 (E -> VALUE .)
    RPAREN          reduce using rule 43 (E -> VALUE .)
    PLUS            shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76
    DIVIDE          shift and go to state 77
    MODULO          shift and go to state 78

    OPERATOR                       shift and go to state 79

state 55

    (44) E -> FLT .
    (48) E -> FLT . OPERATOR E
    (51) OPERATOR -> . PLUS
    (52) OPERATOR -> . TIMES
    (53) OPERATOR -> . MINUS
    (54) OPERATOR -> . DIVIDE
    (55) OPERATOR -> . MODULO

    EIN             reduce using rule 44 (E -> FLT .)
    AUS             reduce using rule 44 (E -> FLT .)
    GSUB            reduce using rule 44 (E -> FLT .)
    WENN            reduce using rule 44 (E -> FLT .)
    WAHREND         reduce using rule 44 (E -> FLT .)
    TUN             reduce using rule 44 (E -> FLT .)
    ID              reduce using rule 44 (E -> FLT .)
    SCHLUSS         reduce using rule 44 (E -> FLT .)
    RUKKHER         reduce using rule 44 (E -> FLT .)
    ENDE            reduce using rule 44 (E -> FLT .)
    SWENN           reduce using rule 44 (E -> FLT .)
    SONNST          reduce using rule 44 (E -> FLT .)
    COMMA           reduce using rule 44 (E -> FLT .)
    RPAREN          reduce using rule 44 (E -> FLT .)
    PLUS            shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76
    DIVIDE          shift and go to state 77
    MODULO          shift and go to state 78

    OPERATOR                       shift and go to state 80

state 56

    (45) E -> STR .
    (49) E -> STR . OPERATOR E
    (51) OPERATOR -> . PLUS
    (52) OPERATOR -> . TIMES
    (53) OPERATOR -> . MINUS
    (54) OPERATOR -> . DIVIDE
    (55) OPERATOR -> . MODULO

    EIN             reduce using rule 45 (E -> STR .)
    AUS             reduce using rule 45 (E -> STR .)
    GSUB            reduce using rule 45 (E -> STR .)
    WENN            reduce using rule 45 (E -> STR .)
    WAHREND         reduce using rule 45 (E -> STR .)
    TUN             reduce using rule 45 (E -> STR .)
    ID              reduce using rule 45 (E -> STR .)
    SCHLUSS         reduce using rule 45 (E -> STR .)
    RUKKHER         reduce using rule 45 (E -> STR .)
    ENDE            reduce using rule 45 (E -> STR .)
    SWENN           reduce using rule 45 (E -> STR .)
    SONNST          reduce using rule 45 (E -> STR .)
    COMMA           reduce using rule 45 (E -> STR .)
    RPAREN          reduce using rule 45 (E -> STR .)
    PLUS            shift and go to state 74
    TIMES           shift and go to state 75
    MINUS           shift and go to state 76
    DIVIDE          shift and go to state 77
    MODULO          shift and go to state 78

    OPERATOR                       shift and go to state 81

state 57

    (46) E -> EIDORAMC .

    EIN             reduce using rule 46 (E -> EIDORAMC .)
    AUS             reduce using rule 46 (E -> EIDORAMC .)
    GSUB            reduce using rule 46 (E -> EIDORAMC .)
    WENN            reduce using rule 46 (E -> EIDORAMC .)
    WAHREND         reduce using rule 46 (E -> EIDORAMC .)
    TUN             reduce using rule 46 (E -> EIDORAMC .)
    ID              reduce using rule 46 (E -> EIDORAMC .)
    SCHLUSS         reduce using rule 46 (E -> EIDORAMC .)
    RUKKHER         reduce using rule 46 (E -> EIDORAMC .)
    ENDE            reduce using rule 46 (E -> EIDORAMC .)
    SWENN           reduce using rule 46 (E -> EIDORAMC .)
    SONNST          reduce using rule 46 (E -> EIDORAMC .)
    COMMA           reduce using rule 46 (E -> EIDORAMC .)
    RPAREN          reduce using rule 46 (E -> EIDORAMC .)


state 58

    (25) EIDORAMC -> ID .
    (26) EIDORAMC -> ID . AMC1
    (23) IDORAMC -> ID .
    (24) IDORAMC -> ID . AMC1
    (65) AMC1 -> . LBRKT VALUE RBRKT AMC2
    (66) AMC1 -> . LBRKT ID RBRKT AMC2
    (67) AMC1 -> . LBRKT VALUE RBRKT
    (68) AMC1 -> . LBRKT ID RBRKT
    (69) AMC1 -> .

  ! reduce/reduce conflict for EIN resolved using rule 25 (EIDORAMC -> ID .)
  ! reduce/reduce conflict for AUS resolved using rule 25 (EIDORAMC -> ID .)
  ! reduce/reduce conflict for GSUB resolved using rule 25 (EIDORAMC -> ID .)
  ! reduce/reduce conflict for WENN resolved using rule 25 (EIDORAMC -> ID .)
  ! reduce/reduce conflict for WAHREND resolved using rule 25 (EIDORAMC -> ID .)
  ! reduce/reduce conflict for TUN resolved using rule 25 (EIDORAMC -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 25 (EIDORAMC -> ID .)
  ! reduce/reduce conflict for SCHLUSS resolved using rule 25 (EIDORAMC -> ID .)
  ! reduce/reduce conflict for RUKKHER resolved using rule 25 (EIDORAMC -> ID .)
  ! reduce/reduce conflict for ENDE resolved using rule 25 (EIDORAMC -> ID .)
  ! reduce/reduce conflict for SWENN resolved using rule 25 (EIDORAMC -> ID .)
  ! reduce/reduce conflict for SONNST resolved using rule 25 (EIDORAMC -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 23 (IDORAMC -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 23 (IDORAMC -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 23 (IDORAMC -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 23 (IDORAMC -> ID .)
  ! reduce/reduce conflict for MODULO resolved using rule 23 (IDORAMC -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 25 (EIDORAMC -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 25 (EIDORAMC -> ID .)
    EIN             reduce using rule 25 (EIDORAMC -> ID .)
    AUS             reduce using rule 25 (EIDORAMC -> ID .)
    GSUB            reduce using rule 25 (EIDORAMC -> ID .)
    WENN            reduce using rule 25 (EIDORAMC -> ID .)
    WAHREND         reduce using rule 25 (EIDORAMC -> ID .)
    TUN             reduce using rule 25 (EIDORAMC -> ID .)
    ID              reduce using rule 25 (EIDORAMC -> ID .)
    SCHLUSS         reduce using rule 25 (EIDORAMC -> ID .)
    RUKKHER         reduce using rule 25 (EIDORAMC -> ID .)
    ENDE            reduce using rule 25 (EIDORAMC -> ID .)
    SWENN           reduce using rule 25 (EIDORAMC -> ID .)
    SONNST          reduce using rule 25 (EIDORAMC -> ID .)
    COMMA           reduce using rule 25 (EIDORAMC -> ID .)
    RPAREN          reduce using rule 25 (EIDORAMC -> ID .)
    PLUS            reduce using rule 23 (IDORAMC -> ID .)
    TIMES           reduce using rule 23 (IDORAMC -> ID .)
    MINUS           reduce using rule 23 (IDORAMC -> ID .)
    DIVIDE          reduce using rule 23 (IDORAMC -> ID .)
    MODULO          reduce using rule 23 (IDORAMC -> ID .)
    LBRKT           shift and go to state 42

  ! EIN             [ reduce using rule 69 (AMC1 -> .) ]
  ! AUS             [ reduce using rule 69 (AMC1 -> .) ]
  ! GSUB            [ reduce using rule 69 (AMC1 -> .) ]
  ! WENN            [ reduce using rule 69 (AMC1 -> .) ]
  ! WAHREND         [ reduce using rule 69 (AMC1 -> .) ]
  ! TUN             [ reduce using rule 69 (AMC1 -> .) ]
  ! ID              [ reduce using rule 69 (AMC1 -> .) ]
  ! SCHLUSS         [ reduce using rule 69 (AMC1 -> .) ]
  ! RUKKHER         [ reduce using rule 69 (AMC1 -> .) ]
  ! ENDE            [ reduce using rule 69 (AMC1 -> .) ]
  ! SWENN           [ reduce using rule 69 (AMC1 -> .) ]
  ! SONNST          [ reduce using rule 69 (AMC1 -> .) ]
  ! PLUS            [ reduce using rule 69 (AMC1 -> .) ]
  ! TIMES           [ reduce using rule 69 (AMC1 -> .) ]
  ! MINUS           [ reduce using rule 69 (AMC1 -> .) ]
  ! DIVIDE          [ reduce using rule 69 (AMC1 -> .) ]
  ! MODULO          [ reduce using rule 69 (AMC1 -> .) ]
  ! COMMA           [ reduce using rule 69 (AMC1 -> .) ]
  ! RPAREN          [ reduce using rule 69 (AMC1 -> .) ]

    AMC1                           shift and go to state 82

state 59

    (16) S0 -> EIN LPAREN IDORAMC . INPUT RPAREN
    (56) INPUT -> . COMMA IDORAMC INPUT
    (57) INPUT -> .

    COMMA           shift and go to state 84
    RPAREN          reduce using rule 57 (INPUT -> .)

    INPUT                          shift and go to state 83

state 60

    (17) S0 -> AUS LPAREN E . OUTPUT RPAREN
    (58) OUTPUT -> . COMMA E OUTPUT
    (59) OUTPUT -> .

    COMMA           shift and go to state 86
    RPAREN          reduce using rule 59 (OUTPUT -> .)

    OUTPUT                         shift and go to state 85

state 61

    (65) AMC1 -> LBRKT VALUE . RBRKT AMC2
    (67) AMC1 -> LBRKT VALUE . RBRKT

    RBRKT           shift and go to state 87


state 62

    (66) AMC1 -> LBRKT ID . RBRKT AMC2
    (68) AMC1 -> LBRKT ID . RBRKT

    RBRKT           shift and go to state 88


state 63

    (19) S0 -> WENN CONDITION DANN . S SW SD ENDE
    (13) S -> . S0 S
    (14) S -> .
    (15) S0 -> . IDORAMC ASSIGN E
    (16) S0 -> . EIN LPAREN IDORAMC INPUT RPAREN
    (17) S0 -> . AUS LPAREN E OUTPUT RPAREN
    (18) S0 -> . GSUB ID
    (19) S0 -> . WENN CONDITION DANN S SW SD ENDE
    (20) S0 -> . WAHREND CONDITION S ENDE
    (21) S0 -> . TUN S WAHREND CONDITION
    (22) S0 -> .
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

  ! shift/reduce conflict for EIN resolved as shift
  ! shift/reduce conflict for AUS resolved as shift
  ! shift/reduce conflict for GSUB resolved as shift
  ! shift/reduce conflict for WENN resolved as shift
  ! shift/reduce conflict for WAHREND resolved as shift
  ! shift/reduce conflict for TUN resolved as shift
  ! reduce/reduce conflict for SWENN resolved using rule 14 (S -> .)
  ! reduce/reduce conflict for SONNST resolved using rule 14 (S -> .)
  ! reduce/reduce conflict for ENDE resolved using rule 14 (S -> .)
  ! shift/reduce conflict for ID resolved as shift
    SWENN           reduce using rule 14 (S -> .)
    SONNST          reduce using rule 14 (S -> .)
    ENDE            reduce using rule 14 (S -> .)
    EIN             shift and go to state 23
    AUS             shift and go to state 24
    GSUB            shift and go to state 25
    WENN            shift and go to state 27
    WAHREND         shift and go to state 28
    TUN             shift and go to state 29
    ID              shift and go to state 26

  ! EIN             [ reduce using rule 22 (S0 -> .) ]
  ! AUS             [ reduce using rule 22 (S0 -> .) ]
  ! GSUB            [ reduce using rule 22 (S0 -> .) ]
  ! WENN            [ reduce using rule 22 (S0 -> .) ]
  ! WAHREND         [ reduce using rule 22 (S0 -> .) ]
  ! TUN             [ reduce using rule 22 (S0 -> .) ]
  ! ID              [ reduce using rule 22 (S0 -> .) ]
  ! SWENN           [ reduce using rule 22 (S0 -> .) ]
  ! SONNST          [ reduce using rule 22 (S0 -> .) ]
  ! ENDE            [ reduce using rule 22 (S0 -> .) ]

    S                              shift and go to state 89
    S0                             shift and go to state 21
    IDORAMC                        shift and go to state 22

state 64

    (28) CONDITION -> CONDITION AND . CONDITION
    (27) CONDITION -> . LPAREN CMP COMPARATOR CMP RPAREN
    (28) CONDITION -> . CONDITION AND CONDITION
    (29) CONDITION -> . CONDITION OR CONDITION

    LPAREN          shift and go to state 44

    CONDITION                      shift and go to state 90

state 65

    (29) CONDITION -> CONDITION OR . CONDITION
    (27) CONDITION -> . LPAREN CMP COMPARATOR CMP RPAREN
    (28) CONDITION -> . CONDITION AND CONDITION
    (29) CONDITION -> . CONDITION OR CONDITION

    LPAREN          shift and go to state 44

    CONDITION                      shift and go to state 91

state 66

    (27) CONDITION -> LPAREN CMP . COMPARATOR CMP RPAREN
    (33) COMPARATOR -> . GT
    (34) COMPARATOR -> . GE
    (35) COMPARATOR -> . EQ
    (36) COMPARATOR -> . NE
    (37) COMPARATOR -> . LE
    (38) COMPARATOR -> . LT

    GT              shift and go to state 93
    GE              shift and go to state 94
    EQ              shift and go to state 95
    NE              shift and go to state 96
    LE              shift and go to state 97
    LT              shift and go to state 98

    COMPARATOR                     shift and go to state 92

state 67

    (30) CMP -> VALUE .

    GT              reduce using rule 30 (CMP -> VALUE .)
    GE              reduce using rule 30 (CMP -> VALUE .)
    EQ              reduce using rule 30 (CMP -> VALUE .)
    NE              reduce using rule 30 (CMP -> VALUE .)
    LE              reduce using rule 30 (CMP -> VALUE .)
    LT              reduce using rule 30 (CMP -> VALUE .)
    RPAREN          reduce using rule 30 (CMP -> VALUE .)


state 68

    (31) CMP -> IDORAMC .

    GT              reduce using rule 31 (CMP -> IDORAMC .)
    GE              reduce using rule 31 (CMP -> IDORAMC .)
    EQ              reduce using rule 31 (CMP -> IDORAMC .)
    NE              reduce using rule 31 (CMP -> IDORAMC .)
    LE              reduce using rule 31 (CMP -> IDORAMC .)
    LT              reduce using rule 31 (CMP -> IDORAMC .)
    RPAREN          reduce using rule 31 (CMP -> IDORAMC .)


state 69

    (32) CMP -> FLT .

    GT              reduce using rule 32 (CMP -> FLT .)
    GE              reduce using rule 32 (CMP -> FLT .)
    EQ              reduce using rule 32 (CMP -> FLT .)
    NE              reduce using rule 32 (CMP -> FLT .)
    LE              reduce using rule 32 (CMP -> FLT .)
    LT              reduce using rule 32 (CMP -> FLT .)
    RPAREN          reduce using rule 32 (CMP -> FLT .)


state 70

    (20) S0 -> WAHREND CONDITION S . ENDE

    ENDE            shift and go to state 99


state 71

    (21) S0 -> TUN S WAHREND . CONDITION
    (27) CONDITION -> . LPAREN CMP COMPARATOR CMP RPAREN
    (28) CONDITION -> . CONDITION AND CONDITION
    (29) CONDITION -> . CONDITION OR CONDITION

    LPAREN          shift and go to state 44

    CONDITION                      shift and go to state 100

state 72

    (9) R -> R0 COLON B RUKKHER R .

    BEGIN           reduce using rule 9 (R -> R0 COLON B RUKKHER R .)


state 73

    (50) E -> IDORAMC OPERATOR . E
    (43) E -> . VALUE
    (44) E -> . FLT
    (45) E -> . STR
    (46) E -> . EIDORAMC
    (47) E -> . VALUE OPERATOR E
    (48) E -> . FLT OPERATOR E
    (49) E -> . STR OPERATOR E
    (50) E -> . IDORAMC OPERATOR E
    (25) EIDORAMC -> . ID
    (26) EIDORAMC -> . ID AMC1
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

    VALUE           shift and go to state 54
    FLT             shift and go to state 55
    STR             shift and go to state 56
    ID              shift and go to state 58

    IDORAMC                        shift and go to state 52
    E                              shift and go to state 101
    EIDORAMC                       shift and go to state 57

state 74

    (51) OPERATOR -> PLUS .

    VALUE           reduce using rule 51 (OPERATOR -> PLUS .)
    FLT             reduce using rule 51 (OPERATOR -> PLUS .)
    STR             reduce using rule 51 (OPERATOR -> PLUS .)
    ID              reduce using rule 51 (OPERATOR -> PLUS .)


state 75

    (52) OPERATOR -> TIMES .

    VALUE           reduce using rule 52 (OPERATOR -> TIMES .)
    FLT             reduce using rule 52 (OPERATOR -> TIMES .)
    STR             reduce using rule 52 (OPERATOR -> TIMES .)
    ID              reduce using rule 52 (OPERATOR -> TIMES .)


state 76

    (53) OPERATOR -> MINUS .

    VALUE           reduce using rule 53 (OPERATOR -> MINUS .)
    FLT             reduce using rule 53 (OPERATOR -> MINUS .)
    STR             reduce using rule 53 (OPERATOR -> MINUS .)
    ID              reduce using rule 53 (OPERATOR -> MINUS .)


state 77

    (54) OPERATOR -> DIVIDE .

    VALUE           reduce using rule 54 (OPERATOR -> DIVIDE .)
    FLT             reduce using rule 54 (OPERATOR -> DIVIDE .)
    STR             reduce using rule 54 (OPERATOR -> DIVIDE .)
    ID              reduce using rule 54 (OPERATOR -> DIVIDE .)


state 78

    (55) OPERATOR -> MODULO .

    VALUE           reduce using rule 55 (OPERATOR -> MODULO .)
    FLT             reduce using rule 55 (OPERATOR -> MODULO .)
    STR             reduce using rule 55 (OPERATOR -> MODULO .)
    ID              reduce using rule 55 (OPERATOR -> MODULO .)


state 79

    (47) E -> VALUE OPERATOR . E
    (43) E -> . VALUE
    (44) E -> . FLT
    (45) E -> . STR
    (46) E -> . EIDORAMC
    (47) E -> . VALUE OPERATOR E
    (48) E -> . FLT OPERATOR E
    (49) E -> . STR OPERATOR E
    (50) E -> . IDORAMC OPERATOR E
    (25) EIDORAMC -> . ID
    (26) EIDORAMC -> . ID AMC1
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

    VALUE           shift and go to state 54
    FLT             shift and go to state 55
    STR             shift and go to state 56
    ID              shift and go to state 58

    E                              shift and go to state 102
    EIDORAMC                       shift and go to state 57
    IDORAMC                        shift and go to state 52

state 80

    (48) E -> FLT OPERATOR . E
    (43) E -> . VALUE
    (44) E -> . FLT
    (45) E -> . STR
    (46) E -> . EIDORAMC
    (47) E -> . VALUE OPERATOR E
    (48) E -> . FLT OPERATOR E
    (49) E -> . STR OPERATOR E
    (50) E -> . IDORAMC OPERATOR E
    (25) EIDORAMC -> . ID
    (26) EIDORAMC -> . ID AMC1
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

    VALUE           shift and go to state 54
    FLT             shift and go to state 55
    STR             shift and go to state 56
    ID              shift and go to state 58

    E                              shift and go to state 103
    EIDORAMC                       shift and go to state 57
    IDORAMC                        shift and go to state 52

state 81

    (49) E -> STR OPERATOR . E
    (43) E -> . VALUE
    (44) E -> . FLT
    (45) E -> . STR
    (46) E -> . EIDORAMC
    (47) E -> . VALUE OPERATOR E
    (48) E -> . FLT OPERATOR E
    (49) E -> . STR OPERATOR E
    (50) E -> . IDORAMC OPERATOR E
    (25) EIDORAMC -> . ID
    (26) EIDORAMC -> . ID AMC1
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

    VALUE           shift and go to state 54
    FLT             shift and go to state 55
    STR             shift and go to state 56
    ID              shift and go to state 58

    E                              shift and go to state 104
    EIDORAMC                       shift and go to state 57
    IDORAMC                        shift and go to state 52

state 82

    (26) EIDORAMC -> ID AMC1 .
    (24) IDORAMC -> ID AMC1 .

    EIN             reduce using rule 26 (EIDORAMC -> ID AMC1 .)
    AUS             reduce using rule 26 (EIDORAMC -> ID AMC1 .)
    GSUB            reduce using rule 26 (EIDORAMC -> ID AMC1 .)
    WENN            reduce using rule 26 (EIDORAMC -> ID AMC1 .)
    WAHREND         reduce using rule 26 (EIDORAMC -> ID AMC1 .)
    TUN             reduce using rule 26 (EIDORAMC -> ID AMC1 .)
    ID              reduce using rule 26 (EIDORAMC -> ID AMC1 .)
    SCHLUSS         reduce using rule 26 (EIDORAMC -> ID AMC1 .)
    RUKKHER         reduce using rule 26 (EIDORAMC -> ID AMC1 .)
    ENDE            reduce using rule 26 (EIDORAMC -> ID AMC1 .)
    SWENN           reduce using rule 26 (EIDORAMC -> ID AMC1 .)
    SONNST          reduce using rule 26 (EIDORAMC -> ID AMC1 .)
    COMMA           reduce using rule 26 (EIDORAMC -> ID AMC1 .)
    RPAREN          reduce using rule 26 (EIDORAMC -> ID AMC1 .)
    PLUS            reduce using rule 24 (IDORAMC -> ID AMC1 .)
    TIMES           reduce using rule 24 (IDORAMC -> ID AMC1 .)
    MINUS           reduce using rule 24 (IDORAMC -> ID AMC1 .)
    DIVIDE          reduce using rule 24 (IDORAMC -> ID AMC1 .)
    MODULO          reduce using rule 24 (IDORAMC -> ID AMC1 .)


state 83

    (16) S0 -> EIN LPAREN IDORAMC INPUT . RPAREN

    RPAREN          shift and go to state 105


state 84

    (56) INPUT -> COMMA . IDORAMC INPUT
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

    ID              shift and go to state 26

    IDORAMC                        shift and go to state 106

state 85

    (17) S0 -> AUS LPAREN E OUTPUT . RPAREN

    RPAREN          shift and go to state 107


state 86

    (58) OUTPUT -> COMMA . E OUTPUT
    (43) E -> . VALUE
    (44) E -> . FLT
    (45) E -> . STR
    (46) E -> . EIDORAMC
    (47) E -> . VALUE OPERATOR E
    (48) E -> . FLT OPERATOR E
    (49) E -> . STR OPERATOR E
    (50) E -> . IDORAMC OPERATOR E
    (25) EIDORAMC -> . ID
    (26) EIDORAMC -> . ID AMC1
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

    VALUE           shift and go to state 54
    FLT             shift and go to state 55
    STR             shift and go to state 56
    ID              shift and go to state 58

    E                              shift and go to state 108
    EIDORAMC                       shift and go to state 57
    IDORAMC                        shift and go to state 52

state 87

    (65) AMC1 -> LBRKT VALUE RBRKT . AMC2
    (67) AMC1 -> LBRKT VALUE RBRKT .
    (70) AMC2 -> . LBRKT VALUE RBRKT AMC3
    (71) AMC2 -> . LBRKT ID RBRKT AMC3
    (72) AMC2 -> . LBRKT VALUE RBRKT
    (73) AMC2 -> . LBRKT ID RBRKT
    (74) AMC2 -> .

  ! reduce/reduce conflict for ASSIGN resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for COMMA resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for GT resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for GE resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for EQ resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for NE resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for LE resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for LT resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for DIM resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for SUB resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for BEGIN resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for EIN resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for AUS resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for GSUB resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for WENN resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for WAHREND resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for TUN resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for ID resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for SCHLUSS resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for RUKKHER resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for ENDE resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for SWENN resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for SONNST resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for PLUS resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for TIMES resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for MINUS resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for MODULO resolved using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    ASSIGN          reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    COMMA           reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    RPAREN          reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    GT              reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    GE              reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    EQ              reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    NE              reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    LE              reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    LT              reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    DIM             reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    SUB             reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    BEGIN           reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    EIN             reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    AUS             reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    GSUB            reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    WENN            reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    WAHREND         reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    TUN             reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    ID              reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    SCHLUSS         reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    RUKKHER         reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    ENDE            reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    SWENN           reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    SONNST          reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    PLUS            reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    TIMES           reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    MINUS           reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    DIVIDE          reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    MODULO          reduce using rule 67 (AMC1 -> LBRKT VALUE RBRKT .)
    LBRKT           shift and go to state 109

  ! ASSIGN          [ reduce using rule 74 (AMC2 -> .) ]
  ! COMMA           [ reduce using rule 74 (AMC2 -> .) ]
  ! RPAREN          [ reduce using rule 74 (AMC2 -> .) ]
  ! GT              [ reduce using rule 74 (AMC2 -> .) ]
  ! GE              [ reduce using rule 74 (AMC2 -> .) ]
  ! EQ              [ reduce using rule 74 (AMC2 -> .) ]
  ! NE              [ reduce using rule 74 (AMC2 -> .) ]
  ! LE              [ reduce using rule 74 (AMC2 -> .) ]
  ! LT              [ reduce using rule 74 (AMC2 -> .) ]
  ! DIM             [ reduce using rule 74 (AMC2 -> .) ]
  ! SUB             [ reduce using rule 74 (AMC2 -> .) ]
  ! BEGIN           [ reduce using rule 74 (AMC2 -> .) ]
  ! EIN             [ reduce using rule 74 (AMC2 -> .) ]
  ! AUS             [ reduce using rule 74 (AMC2 -> .) ]
  ! GSUB            [ reduce using rule 74 (AMC2 -> .) ]
  ! WENN            [ reduce using rule 74 (AMC2 -> .) ]
  ! WAHREND         [ reduce using rule 74 (AMC2 -> .) ]
  ! TUN             [ reduce using rule 74 (AMC2 -> .) ]
  ! ID              [ reduce using rule 74 (AMC2 -> .) ]
  ! SCHLUSS         [ reduce using rule 74 (AMC2 -> .) ]
  ! RUKKHER         [ reduce using rule 74 (AMC2 -> .) ]
  ! ENDE            [ reduce using rule 74 (AMC2 -> .) ]
  ! SWENN           [ reduce using rule 74 (AMC2 -> .) ]
  ! SONNST          [ reduce using rule 74 (AMC2 -> .) ]
  ! PLUS            [ reduce using rule 74 (AMC2 -> .) ]
  ! TIMES           [ reduce using rule 74 (AMC2 -> .) ]
  ! MINUS           [ reduce using rule 74 (AMC2 -> .) ]
  ! DIVIDE          [ reduce using rule 74 (AMC2 -> .) ]
  ! MODULO          [ reduce using rule 74 (AMC2 -> .) ]

    AMC2                           shift and go to state 110

state 88

    (66) AMC1 -> LBRKT ID RBRKT . AMC2
    (68) AMC1 -> LBRKT ID RBRKT .
    (70) AMC2 -> . LBRKT VALUE RBRKT AMC3
    (71) AMC2 -> . LBRKT ID RBRKT AMC3
    (72) AMC2 -> . LBRKT VALUE RBRKT
    (73) AMC2 -> . LBRKT ID RBRKT
    (74) AMC2 -> .

  ! reduce/reduce conflict for ASSIGN resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for COMMA resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for GT resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for GE resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for EQ resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for NE resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for LE resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for LT resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for DIM resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for SUB resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for BEGIN resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for EIN resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for AUS resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for GSUB resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for WENN resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for WAHREND resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for TUN resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for ID resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for SCHLUSS resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for RUKKHER resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for ENDE resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for SWENN resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for SONNST resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for PLUS resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for TIMES resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for MINUS resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for MODULO resolved using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    ASSIGN          reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    COMMA           reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    RPAREN          reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    GT              reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    GE              reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    EQ              reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    NE              reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    LE              reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    LT              reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    DIM             reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    SUB             reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    BEGIN           reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    EIN             reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    AUS             reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    GSUB            reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    WENN            reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    WAHREND         reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    TUN             reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    ID              reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    SCHLUSS         reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    RUKKHER         reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    ENDE            reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    SWENN           reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    SONNST          reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    PLUS            reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    TIMES           reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    MINUS           reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    DIVIDE          reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    MODULO          reduce using rule 68 (AMC1 -> LBRKT ID RBRKT .)
    LBRKT           shift and go to state 109

  ! ASSIGN          [ reduce using rule 74 (AMC2 -> .) ]
  ! COMMA           [ reduce using rule 74 (AMC2 -> .) ]
  ! RPAREN          [ reduce using rule 74 (AMC2 -> .) ]
  ! GT              [ reduce using rule 74 (AMC2 -> .) ]
  ! GE              [ reduce using rule 74 (AMC2 -> .) ]
  ! EQ              [ reduce using rule 74 (AMC2 -> .) ]
  ! NE              [ reduce using rule 74 (AMC2 -> .) ]
  ! LE              [ reduce using rule 74 (AMC2 -> .) ]
  ! LT              [ reduce using rule 74 (AMC2 -> .) ]
  ! DIM             [ reduce using rule 74 (AMC2 -> .) ]
  ! SUB             [ reduce using rule 74 (AMC2 -> .) ]
  ! BEGIN           [ reduce using rule 74 (AMC2 -> .) ]
  ! EIN             [ reduce using rule 74 (AMC2 -> .) ]
  ! AUS             [ reduce using rule 74 (AMC2 -> .) ]
  ! GSUB            [ reduce using rule 74 (AMC2 -> .) ]
  ! WENN            [ reduce using rule 74 (AMC2 -> .) ]
  ! WAHREND         [ reduce using rule 74 (AMC2 -> .) ]
  ! TUN             [ reduce using rule 74 (AMC2 -> .) ]
  ! ID              [ reduce using rule 74 (AMC2 -> .) ]
  ! SCHLUSS         [ reduce using rule 74 (AMC2 -> .) ]
  ! RUKKHER         [ reduce using rule 74 (AMC2 -> .) ]
  ! ENDE            [ reduce using rule 74 (AMC2 -> .) ]
  ! SWENN           [ reduce using rule 74 (AMC2 -> .) ]
  ! SONNST          [ reduce using rule 74 (AMC2 -> .) ]
  ! PLUS            [ reduce using rule 74 (AMC2 -> .) ]
  ! TIMES           [ reduce using rule 74 (AMC2 -> .) ]
  ! MINUS           [ reduce using rule 74 (AMC2 -> .) ]
  ! DIVIDE          [ reduce using rule 74 (AMC2 -> .) ]
  ! MODULO          [ reduce using rule 74 (AMC2 -> .) ]

    AMC2                           shift and go to state 111

state 89

    (19) S0 -> WENN CONDITION DANN S . SW SD ENDE
    (39) SW -> . SWENN CONDITION DANN S SW
    (40) SW -> .

    SWENN           shift and go to state 113
    SONNST          reduce using rule 40 (SW -> .)
    ENDE            reduce using rule 40 (SW -> .)

    SW                             shift and go to state 112

state 90

    (28) CONDITION -> CONDITION AND CONDITION .
    (28) CONDITION -> CONDITION . AND CONDITION
    (29) CONDITION -> CONDITION . OR CONDITION

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    DANN            reduce using rule 28 (CONDITION -> CONDITION AND CONDITION .)
    EIN             reduce using rule 28 (CONDITION -> CONDITION AND CONDITION .)
    AUS             reduce using rule 28 (CONDITION -> CONDITION AND CONDITION .)
    GSUB            reduce using rule 28 (CONDITION -> CONDITION AND CONDITION .)
    WENN            reduce using rule 28 (CONDITION -> CONDITION AND CONDITION .)
    WAHREND         reduce using rule 28 (CONDITION -> CONDITION AND CONDITION .)
    TUN             reduce using rule 28 (CONDITION -> CONDITION AND CONDITION .)
    ID              reduce using rule 28 (CONDITION -> CONDITION AND CONDITION .)
    ENDE            reduce using rule 28 (CONDITION -> CONDITION AND CONDITION .)
    SCHLUSS         reduce using rule 28 (CONDITION -> CONDITION AND CONDITION .)
    RUKKHER         reduce using rule 28 (CONDITION -> CONDITION AND CONDITION .)
    SWENN           reduce using rule 28 (CONDITION -> CONDITION AND CONDITION .)
    SONNST          reduce using rule 28 (CONDITION -> CONDITION AND CONDITION .)
    AND             shift and go to state 64
    OR              shift and go to state 65

  ! AND             [ reduce using rule 28 (CONDITION -> CONDITION AND CONDITION .) ]
  ! OR              [ reduce using rule 28 (CONDITION -> CONDITION AND CONDITION .) ]


state 91

    (29) CONDITION -> CONDITION OR CONDITION .
    (28) CONDITION -> CONDITION . AND CONDITION
    (29) CONDITION -> CONDITION . OR CONDITION

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    DANN            reduce using rule 29 (CONDITION -> CONDITION OR CONDITION .)
    EIN             reduce using rule 29 (CONDITION -> CONDITION OR CONDITION .)
    AUS             reduce using rule 29 (CONDITION -> CONDITION OR CONDITION .)
    GSUB            reduce using rule 29 (CONDITION -> CONDITION OR CONDITION .)
    WENN            reduce using rule 29 (CONDITION -> CONDITION OR CONDITION .)
    WAHREND         reduce using rule 29 (CONDITION -> CONDITION OR CONDITION .)
    TUN             reduce using rule 29 (CONDITION -> CONDITION OR CONDITION .)
    ID              reduce using rule 29 (CONDITION -> CONDITION OR CONDITION .)
    ENDE            reduce using rule 29 (CONDITION -> CONDITION OR CONDITION .)
    SCHLUSS         reduce using rule 29 (CONDITION -> CONDITION OR CONDITION .)
    RUKKHER         reduce using rule 29 (CONDITION -> CONDITION OR CONDITION .)
    SWENN           reduce using rule 29 (CONDITION -> CONDITION OR CONDITION .)
    SONNST          reduce using rule 29 (CONDITION -> CONDITION OR CONDITION .)
    AND             shift and go to state 64
    OR              shift and go to state 65

  ! AND             [ reduce using rule 29 (CONDITION -> CONDITION OR CONDITION .) ]
  ! OR              [ reduce using rule 29 (CONDITION -> CONDITION OR CONDITION .) ]


state 92

    (27) CONDITION -> LPAREN CMP COMPARATOR . CMP RPAREN
    (30) CMP -> . VALUE
    (31) CMP -> . IDORAMC
    (32) CMP -> . FLT
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

    VALUE           shift and go to state 67
    FLT             shift and go to state 69
    ID              shift and go to state 26

    CMP                            shift and go to state 114
    IDORAMC                        shift and go to state 68

state 93

    (33) COMPARATOR -> GT .

    VALUE           reduce using rule 33 (COMPARATOR -> GT .)
    FLT             reduce using rule 33 (COMPARATOR -> GT .)
    ID              reduce using rule 33 (COMPARATOR -> GT .)


state 94

    (34) COMPARATOR -> GE .

    VALUE           reduce using rule 34 (COMPARATOR -> GE .)
    FLT             reduce using rule 34 (COMPARATOR -> GE .)
    ID              reduce using rule 34 (COMPARATOR -> GE .)


state 95

    (35) COMPARATOR -> EQ .

    VALUE           reduce using rule 35 (COMPARATOR -> EQ .)
    FLT             reduce using rule 35 (COMPARATOR -> EQ .)
    ID              reduce using rule 35 (COMPARATOR -> EQ .)


state 96

    (36) COMPARATOR -> NE .

    VALUE           reduce using rule 36 (COMPARATOR -> NE .)
    FLT             reduce using rule 36 (COMPARATOR -> NE .)
    ID              reduce using rule 36 (COMPARATOR -> NE .)


state 97

    (37) COMPARATOR -> LE .

    VALUE           reduce using rule 37 (COMPARATOR -> LE .)
    FLT             reduce using rule 37 (COMPARATOR -> LE .)
    ID              reduce using rule 37 (COMPARATOR -> LE .)


state 98

    (38) COMPARATOR -> LT .

    VALUE           reduce using rule 38 (COMPARATOR -> LT .)
    FLT             reduce using rule 38 (COMPARATOR -> LT .)
    ID              reduce using rule 38 (COMPARATOR -> LT .)


state 99

    (20) S0 -> WAHREND CONDITION S ENDE .

    EIN             reduce using rule 20 (S0 -> WAHREND CONDITION S ENDE .)
    AUS             reduce using rule 20 (S0 -> WAHREND CONDITION S ENDE .)
    GSUB            reduce using rule 20 (S0 -> WAHREND CONDITION S ENDE .)
    WENN            reduce using rule 20 (S0 -> WAHREND CONDITION S ENDE .)
    WAHREND         reduce using rule 20 (S0 -> WAHREND CONDITION S ENDE .)
    TUN             reduce using rule 20 (S0 -> WAHREND CONDITION S ENDE .)
    ID              reduce using rule 20 (S0 -> WAHREND CONDITION S ENDE .)
    SCHLUSS         reduce using rule 20 (S0 -> WAHREND CONDITION S ENDE .)
    RUKKHER         reduce using rule 20 (S0 -> WAHREND CONDITION S ENDE .)
    ENDE            reduce using rule 20 (S0 -> WAHREND CONDITION S ENDE .)
    SWENN           reduce using rule 20 (S0 -> WAHREND CONDITION S ENDE .)
    SONNST          reduce using rule 20 (S0 -> WAHREND CONDITION S ENDE .)


state 100

    (21) S0 -> TUN S WAHREND CONDITION .
    (28) CONDITION -> CONDITION . AND CONDITION
    (29) CONDITION -> CONDITION . OR CONDITION

    EIN             reduce using rule 21 (S0 -> TUN S WAHREND CONDITION .)
    AUS             reduce using rule 21 (S0 -> TUN S WAHREND CONDITION .)
    GSUB            reduce using rule 21 (S0 -> TUN S WAHREND CONDITION .)
    WENN            reduce using rule 21 (S0 -> TUN S WAHREND CONDITION .)
    WAHREND         reduce using rule 21 (S0 -> TUN S WAHREND CONDITION .)
    TUN             reduce using rule 21 (S0 -> TUN S WAHREND CONDITION .)
    ID              reduce using rule 21 (S0 -> TUN S WAHREND CONDITION .)
    SCHLUSS         reduce using rule 21 (S0 -> TUN S WAHREND CONDITION .)
    RUKKHER         reduce using rule 21 (S0 -> TUN S WAHREND CONDITION .)
    ENDE            reduce using rule 21 (S0 -> TUN S WAHREND CONDITION .)
    SWENN           reduce using rule 21 (S0 -> TUN S WAHREND CONDITION .)
    SONNST          reduce using rule 21 (S0 -> TUN S WAHREND CONDITION .)
    AND             shift and go to state 64
    OR              shift and go to state 65


state 101

    (50) E -> IDORAMC OPERATOR E .

    EIN             reduce using rule 50 (E -> IDORAMC OPERATOR E .)
    AUS             reduce using rule 50 (E -> IDORAMC OPERATOR E .)
    GSUB            reduce using rule 50 (E -> IDORAMC OPERATOR E .)
    WENN            reduce using rule 50 (E -> IDORAMC OPERATOR E .)
    WAHREND         reduce using rule 50 (E -> IDORAMC OPERATOR E .)
    TUN             reduce using rule 50 (E -> IDORAMC OPERATOR E .)
    ID              reduce using rule 50 (E -> IDORAMC OPERATOR E .)
    SCHLUSS         reduce using rule 50 (E -> IDORAMC OPERATOR E .)
    RUKKHER         reduce using rule 50 (E -> IDORAMC OPERATOR E .)
    ENDE            reduce using rule 50 (E -> IDORAMC OPERATOR E .)
    SWENN           reduce using rule 50 (E -> IDORAMC OPERATOR E .)
    SONNST          reduce using rule 50 (E -> IDORAMC OPERATOR E .)
    COMMA           reduce using rule 50 (E -> IDORAMC OPERATOR E .)
    RPAREN          reduce using rule 50 (E -> IDORAMC OPERATOR E .)


state 102

    (47) E -> VALUE OPERATOR E .

    EIN             reduce using rule 47 (E -> VALUE OPERATOR E .)
    AUS             reduce using rule 47 (E -> VALUE OPERATOR E .)
    GSUB            reduce using rule 47 (E -> VALUE OPERATOR E .)
    WENN            reduce using rule 47 (E -> VALUE OPERATOR E .)
    WAHREND         reduce using rule 47 (E -> VALUE OPERATOR E .)
    TUN             reduce using rule 47 (E -> VALUE OPERATOR E .)
    ID              reduce using rule 47 (E -> VALUE OPERATOR E .)
    SCHLUSS         reduce using rule 47 (E -> VALUE OPERATOR E .)
    RUKKHER         reduce using rule 47 (E -> VALUE OPERATOR E .)
    ENDE            reduce using rule 47 (E -> VALUE OPERATOR E .)
    SWENN           reduce using rule 47 (E -> VALUE OPERATOR E .)
    SONNST          reduce using rule 47 (E -> VALUE OPERATOR E .)
    COMMA           reduce using rule 47 (E -> VALUE OPERATOR E .)
    RPAREN          reduce using rule 47 (E -> VALUE OPERATOR E .)


state 103

    (48) E -> FLT OPERATOR E .

    EIN             reduce using rule 48 (E -> FLT OPERATOR E .)
    AUS             reduce using rule 48 (E -> FLT OPERATOR E .)
    GSUB            reduce using rule 48 (E -> FLT OPERATOR E .)
    WENN            reduce using rule 48 (E -> FLT OPERATOR E .)
    WAHREND         reduce using rule 48 (E -> FLT OPERATOR E .)
    TUN             reduce using rule 48 (E -> FLT OPERATOR E .)
    ID              reduce using rule 48 (E -> FLT OPERATOR E .)
    SCHLUSS         reduce using rule 48 (E -> FLT OPERATOR E .)
    RUKKHER         reduce using rule 48 (E -> FLT OPERATOR E .)
    ENDE            reduce using rule 48 (E -> FLT OPERATOR E .)
    SWENN           reduce using rule 48 (E -> FLT OPERATOR E .)
    SONNST          reduce using rule 48 (E -> FLT OPERATOR E .)
    COMMA           reduce using rule 48 (E -> FLT OPERATOR E .)
    RPAREN          reduce using rule 48 (E -> FLT OPERATOR E .)


state 104

    (49) E -> STR OPERATOR E .

    EIN             reduce using rule 49 (E -> STR OPERATOR E .)
    AUS             reduce using rule 49 (E -> STR OPERATOR E .)
    GSUB            reduce using rule 49 (E -> STR OPERATOR E .)
    WENN            reduce using rule 49 (E -> STR OPERATOR E .)
    WAHREND         reduce using rule 49 (E -> STR OPERATOR E .)
    TUN             reduce using rule 49 (E -> STR OPERATOR E .)
    ID              reduce using rule 49 (E -> STR OPERATOR E .)
    SCHLUSS         reduce using rule 49 (E -> STR OPERATOR E .)
    RUKKHER         reduce using rule 49 (E -> STR OPERATOR E .)
    ENDE            reduce using rule 49 (E -> STR OPERATOR E .)
    SWENN           reduce using rule 49 (E -> STR OPERATOR E .)
    SONNST          reduce using rule 49 (E -> STR OPERATOR E .)
    COMMA           reduce using rule 49 (E -> STR OPERATOR E .)
    RPAREN          reduce using rule 49 (E -> STR OPERATOR E .)


state 105

    (16) S0 -> EIN LPAREN IDORAMC INPUT RPAREN .

    EIN             reduce using rule 16 (S0 -> EIN LPAREN IDORAMC INPUT RPAREN .)
    AUS             reduce using rule 16 (S0 -> EIN LPAREN IDORAMC INPUT RPAREN .)
    GSUB            reduce using rule 16 (S0 -> EIN LPAREN IDORAMC INPUT RPAREN .)
    WENN            reduce using rule 16 (S0 -> EIN LPAREN IDORAMC INPUT RPAREN .)
    WAHREND         reduce using rule 16 (S0 -> EIN LPAREN IDORAMC INPUT RPAREN .)
    TUN             reduce using rule 16 (S0 -> EIN LPAREN IDORAMC INPUT RPAREN .)
    ID              reduce using rule 16 (S0 -> EIN LPAREN IDORAMC INPUT RPAREN .)
    SCHLUSS         reduce using rule 16 (S0 -> EIN LPAREN IDORAMC INPUT RPAREN .)
    RUKKHER         reduce using rule 16 (S0 -> EIN LPAREN IDORAMC INPUT RPAREN .)
    ENDE            reduce using rule 16 (S0 -> EIN LPAREN IDORAMC INPUT RPAREN .)
    SWENN           reduce using rule 16 (S0 -> EIN LPAREN IDORAMC INPUT RPAREN .)
    SONNST          reduce using rule 16 (S0 -> EIN LPAREN IDORAMC INPUT RPAREN .)


state 106

    (56) INPUT -> COMMA IDORAMC . INPUT
    (56) INPUT -> . COMMA IDORAMC INPUT
    (57) INPUT -> .

    COMMA           shift and go to state 84
    RPAREN          reduce using rule 57 (INPUT -> .)

    INPUT                          shift and go to state 115

state 107

    (17) S0 -> AUS LPAREN E OUTPUT RPAREN .

    EIN             reduce using rule 17 (S0 -> AUS LPAREN E OUTPUT RPAREN .)
    AUS             reduce using rule 17 (S0 -> AUS LPAREN E OUTPUT RPAREN .)
    GSUB            reduce using rule 17 (S0 -> AUS LPAREN E OUTPUT RPAREN .)
    WENN            reduce using rule 17 (S0 -> AUS LPAREN E OUTPUT RPAREN .)
    WAHREND         reduce using rule 17 (S0 -> AUS LPAREN E OUTPUT RPAREN .)
    TUN             reduce using rule 17 (S0 -> AUS LPAREN E OUTPUT RPAREN .)
    ID              reduce using rule 17 (S0 -> AUS LPAREN E OUTPUT RPAREN .)
    SCHLUSS         reduce using rule 17 (S0 -> AUS LPAREN E OUTPUT RPAREN .)
    RUKKHER         reduce using rule 17 (S0 -> AUS LPAREN E OUTPUT RPAREN .)
    ENDE            reduce using rule 17 (S0 -> AUS LPAREN E OUTPUT RPAREN .)
    SWENN           reduce using rule 17 (S0 -> AUS LPAREN E OUTPUT RPAREN .)
    SONNST          reduce using rule 17 (S0 -> AUS LPAREN E OUTPUT RPAREN .)


state 108

    (58) OUTPUT -> COMMA E . OUTPUT
    (58) OUTPUT -> . COMMA E OUTPUT
    (59) OUTPUT -> .

    COMMA           shift and go to state 86
    RPAREN          reduce using rule 59 (OUTPUT -> .)

    OUTPUT                         shift and go to state 116

state 109

    (70) AMC2 -> LBRKT . VALUE RBRKT AMC3
    (71) AMC2 -> LBRKT . ID RBRKT AMC3
    (72) AMC2 -> LBRKT . VALUE RBRKT
    (73) AMC2 -> LBRKT . ID RBRKT

    VALUE           shift and go to state 117
    ID              shift and go to state 118


state 110

    (65) AMC1 -> LBRKT VALUE RBRKT AMC2 .

    ASSIGN          reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    COMMA           reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    RPAREN          reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    GT              reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    GE              reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    EQ              reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    NE              reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    LE              reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    LT              reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    DIM             reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    SUB             reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    BEGIN           reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    EIN             reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    AUS             reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    GSUB            reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    WENN            reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    WAHREND         reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    TUN             reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    ID              reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    SCHLUSS         reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    RUKKHER         reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    ENDE            reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    SWENN           reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    SONNST          reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    PLUS            reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    TIMES           reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    MINUS           reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    DIVIDE          reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)
    MODULO          reduce using rule 65 (AMC1 -> LBRKT VALUE RBRKT AMC2 .)


state 111

    (66) AMC1 -> LBRKT ID RBRKT AMC2 .

    ASSIGN          reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    COMMA           reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    RPAREN          reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    GT              reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    GE              reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    EQ              reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    NE              reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    LE              reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    LT              reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    DIM             reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    SUB             reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    BEGIN           reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    EIN             reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    AUS             reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    GSUB            reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    WENN            reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    WAHREND         reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    TUN             reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    ID              reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    SCHLUSS         reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    RUKKHER         reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    ENDE            reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    SWENN           reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    SONNST          reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    PLUS            reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    TIMES           reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    MINUS           reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    DIVIDE          reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)
    MODULO          reduce using rule 66 (AMC1 -> LBRKT ID RBRKT AMC2 .)


state 112

    (19) S0 -> WENN CONDITION DANN S SW . SD ENDE
    (41) SD -> . SONNST DANN S
    (42) SD -> .

    SONNST          shift and go to state 120
    ENDE            reduce using rule 42 (SD -> .)

    SD                             shift and go to state 119

state 113

    (39) SW -> SWENN . CONDITION DANN S SW
    (27) CONDITION -> . LPAREN CMP COMPARATOR CMP RPAREN
    (28) CONDITION -> . CONDITION AND CONDITION
    (29) CONDITION -> . CONDITION OR CONDITION

    LPAREN          shift and go to state 44

    CONDITION                      shift and go to state 121

state 114

    (27) CONDITION -> LPAREN CMP COMPARATOR CMP . RPAREN

    RPAREN          shift and go to state 122


state 115

    (56) INPUT -> COMMA IDORAMC INPUT .

    RPAREN          reduce using rule 56 (INPUT -> COMMA IDORAMC INPUT .)


state 116

    (58) OUTPUT -> COMMA E OUTPUT .

    RPAREN          reduce using rule 58 (OUTPUT -> COMMA E OUTPUT .)


state 117

    (70) AMC2 -> LBRKT VALUE . RBRKT AMC3
    (72) AMC2 -> LBRKT VALUE . RBRKT

    RBRKT           shift and go to state 123


state 118

    (71) AMC2 -> LBRKT ID . RBRKT AMC3
    (73) AMC2 -> LBRKT ID . RBRKT

    RBRKT           shift and go to state 124


state 119

    (19) S0 -> WENN CONDITION DANN S SW SD . ENDE

    ENDE            shift and go to state 125


state 120

    (41) SD -> SONNST . DANN S

    DANN            shift and go to state 126


state 121

    (39) SW -> SWENN CONDITION . DANN S SW
    (28) CONDITION -> CONDITION . AND CONDITION
    (29) CONDITION -> CONDITION . OR CONDITION

    DANN            shift and go to state 127
    AND             shift and go to state 64
    OR              shift and go to state 65


state 122

    (27) CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN .

    DANN            reduce using rule 27 (CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN .)
    AND             reduce using rule 27 (CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN .)
    OR              reduce using rule 27 (CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN .)
    EIN             reduce using rule 27 (CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN .)
    AUS             reduce using rule 27 (CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN .)
    GSUB            reduce using rule 27 (CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN .)
    WENN            reduce using rule 27 (CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN .)
    WAHREND         reduce using rule 27 (CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN .)
    TUN             reduce using rule 27 (CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN .)
    ID              reduce using rule 27 (CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN .)
    ENDE            reduce using rule 27 (CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN .)
    SCHLUSS         reduce using rule 27 (CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN .)
    RUKKHER         reduce using rule 27 (CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN .)
    SWENN           reduce using rule 27 (CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN .)
    SONNST          reduce using rule 27 (CONDITION -> LPAREN CMP COMPARATOR CMP RPAREN .)


state 123

    (70) AMC2 -> LBRKT VALUE RBRKT . AMC3
    (72) AMC2 -> LBRKT VALUE RBRKT .
    (75) AMC3 -> . LBRKT VALUE RBRKT
    (76) AMC3 -> . LBRKT ID RBRKT
    (77) AMC3 -> .

  ! reduce/reduce conflict for ASSIGN resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for COMMA resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for GT resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for GE resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for EQ resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for NE resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for LE resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for LT resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for DIM resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for SUB resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for BEGIN resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for EIN resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for AUS resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for GSUB resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for WENN resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for WAHREND resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for TUN resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for ID resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for SCHLUSS resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for RUKKHER resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for ENDE resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for SWENN resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for SONNST resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for PLUS resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for TIMES resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for MINUS resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
  ! reduce/reduce conflict for MODULO resolved using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    ASSIGN          reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    COMMA           reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    RPAREN          reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    GT              reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    GE              reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    EQ              reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    NE              reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    LE              reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    LT              reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    DIM             reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    SUB             reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    BEGIN           reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    EIN             reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    AUS             reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    GSUB            reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    WENN            reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    WAHREND         reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    TUN             reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    ID              reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    SCHLUSS         reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    RUKKHER         reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    ENDE            reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    SWENN           reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    SONNST          reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    PLUS            reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    TIMES           reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    MINUS           reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    DIVIDE          reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    MODULO          reduce using rule 72 (AMC2 -> LBRKT VALUE RBRKT .)
    LBRKT           shift and go to state 128

  ! ASSIGN          [ reduce using rule 77 (AMC3 -> .) ]
  ! COMMA           [ reduce using rule 77 (AMC3 -> .) ]
  ! RPAREN          [ reduce using rule 77 (AMC3 -> .) ]
  ! GT              [ reduce using rule 77 (AMC3 -> .) ]
  ! GE              [ reduce using rule 77 (AMC3 -> .) ]
  ! EQ              [ reduce using rule 77 (AMC3 -> .) ]
  ! NE              [ reduce using rule 77 (AMC3 -> .) ]
  ! LE              [ reduce using rule 77 (AMC3 -> .) ]
  ! LT              [ reduce using rule 77 (AMC3 -> .) ]
  ! DIM             [ reduce using rule 77 (AMC3 -> .) ]
  ! SUB             [ reduce using rule 77 (AMC3 -> .) ]
  ! BEGIN           [ reduce using rule 77 (AMC3 -> .) ]
  ! EIN             [ reduce using rule 77 (AMC3 -> .) ]
  ! AUS             [ reduce using rule 77 (AMC3 -> .) ]
  ! GSUB            [ reduce using rule 77 (AMC3 -> .) ]
  ! WENN            [ reduce using rule 77 (AMC3 -> .) ]
  ! WAHREND         [ reduce using rule 77 (AMC3 -> .) ]
  ! TUN             [ reduce using rule 77 (AMC3 -> .) ]
  ! ID              [ reduce using rule 77 (AMC3 -> .) ]
  ! SCHLUSS         [ reduce using rule 77 (AMC3 -> .) ]
  ! RUKKHER         [ reduce using rule 77 (AMC3 -> .) ]
  ! ENDE            [ reduce using rule 77 (AMC3 -> .) ]
  ! SWENN           [ reduce using rule 77 (AMC3 -> .) ]
  ! SONNST          [ reduce using rule 77 (AMC3 -> .) ]
  ! PLUS            [ reduce using rule 77 (AMC3 -> .) ]
  ! TIMES           [ reduce using rule 77 (AMC3 -> .) ]
  ! MINUS           [ reduce using rule 77 (AMC3 -> .) ]
  ! DIVIDE          [ reduce using rule 77 (AMC3 -> .) ]
  ! MODULO          [ reduce using rule 77 (AMC3 -> .) ]

    AMC3                           shift and go to state 129

state 124

    (71) AMC2 -> LBRKT ID RBRKT . AMC3
    (73) AMC2 -> LBRKT ID RBRKT .
    (75) AMC3 -> . LBRKT VALUE RBRKT
    (76) AMC3 -> . LBRKT ID RBRKT
    (77) AMC3 -> .

  ! reduce/reduce conflict for ASSIGN resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for COMMA resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for GT resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for GE resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for EQ resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for NE resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for LE resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for LT resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for DIM resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for SUB resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for BEGIN resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for EIN resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for AUS resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for GSUB resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for WENN resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for WAHREND resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for TUN resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for ID resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for SCHLUSS resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for RUKKHER resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for ENDE resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for SWENN resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for SONNST resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for PLUS resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for TIMES resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for MINUS resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
  ! reduce/reduce conflict for MODULO resolved using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    ASSIGN          reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    COMMA           reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    RPAREN          reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    GT              reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    GE              reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    EQ              reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    NE              reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    LE              reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    LT              reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    DIM             reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    SUB             reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    BEGIN           reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    EIN             reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    AUS             reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    GSUB            reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    WENN            reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    WAHREND         reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    TUN             reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    ID              reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    SCHLUSS         reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    RUKKHER         reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    ENDE            reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    SWENN           reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    SONNST          reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    PLUS            reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    TIMES           reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    MINUS           reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    DIVIDE          reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    MODULO          reduce using rule 73 (AMC2 -> LBRKT ID RBRKT .)
    LBRKT           shift and go to state 128

  ! ASSIGN          [ reduce using rule 77 (AMC3 -> .) ]
  ! COMMA           [ reduce using rule 77 (AMC3 -> .) ]
  ! RPAREN          [ reduce using rule 77 (AMC3 -> .) ]
  ! GT              [ reduce using rule 77 (AMC3 -> .) ]
  ! GE              [ reduce using rule 77 (AMC3 -> .) ]
  ! EQ              [ reduce using rule 77 (AMC3 -> .) ]
  ! NE              [ reduce using rule 77 (AMC3 -> .) ]
  ! LE              [ reduce using rule 77 (AMC3 -> .) ]
  ! LT              [ reduce using rule 77 (AMC3 -> .) ]
  ! DIM             [ reduce using rule 77 (AMC3 -> .) ]
  ! SUB             [ reduce using rule 77 (AMC3 -> .) ]
  ! BEGIN           [ reduce using rule 77 (AMC3 -> .) ]
  ! EIN             [ reduce using rule 77 (AMC3 -> .) ]
  ! AUS             [ reduce using rule 77 (AMC3 -> .) ]
  ! GSUB            [ reduce using rule 77 (AMC3 -> .) ]
  ! WENN            [ reduce using rule 77 (AMC3 -> .) ]
  ! WAHREND         [ reduce using rule 77 (AMC3 -> .) ]
  ! TUN             [ reduce using rule 77 (AMC3 -> .) ]
  ! ID              [ reduce using rule 77 (AMC3 -> .) ]
  ! SCHLUSS         [ reduce using rule 77 (AMC3 -> .) ]
  ! RUKKHER         [ reduce using rule 77 (AMC3 -> .) ]
  ! ENDE            [ reduce using rule 77 (AMC3 -> .) ]
  ! SWENN           [ reduce using rule 77 (AMC3 -> .) ]
  ! SONNST          [ reduce using rule 77 (AMC3 -> .) ]
  ! PLUS            [ reduce using rule 77 (AMC3 -> .) ]
  ! TIMES           [ reduce using rule 77 (AMC3 -> .) ]
  ! MINUS           [ reduce using rule 77 (AMC3 -> .) ]
  ! DIVIDE          [ reduce using rule 77 (AMC3 -> .) ]
  ! MODULO          [ reduce using rule 77 (AMC3 -> .) ]

    AMC3                           shift and go to state 130

state 125

    (19) S0 -> WENN CONDITION DANN S SW SD ENDE .

    EIN             reduce using rule 19 (S0 -> WENN CONDITION DANN S SW SD ENDE .)
    AUS             reduce using rule 19 (S0 -> WENN CONDITION DANN S SW SD ENDE .)
    GSUB            reduce using rule 19 (S0 -> WENN CONDITION DANN S SW SD ENDE .)
    WENN            reduce using rule 19 (S0 -> WENN CONDITION DANN S SW SD ENDE .)
    WAHREND         reduce using rule 19 (S0 -> WENN CONDITION DANN S SW SD ENDE .)
    TUN             reduce using rule 19 (S0 -> WENN CONDITION DANN S SW SD ENDE .)
    ID              reduce using rule 19 (S0 -> WENN CONDITION DANN S SW SD ENDE .)
    SCHLUSS         reduce using rule 19 (S0 -> WENN CONDITION DANN S SW SD ENDE .)
    RUKKHER         reduce using rule 19 (S0 -> WENN CONDITION DANN S SW SD ENDE .)
    ENDE            reduce using rule 19 (S0 -> WENN CONDITION DANN S SW SD ENDE .)
    SWENN           reduce using rule 19 (S0 -> WENN CONDITION DANN S SW SD ENDE .)
    SONNST          reduce using rule 19 (S0 -> WENN CONDITION DANN S SW SD ENDE .)


state 126

    (41) SD -> SONNST DANN . S
    (13) S -> . S0 S
    (14) S -> .
    (15) S0 -> . IDORAMC ASSIGN E
    (16) S0 -> . EIN LPAREN IDORAMC INPUT RPAREN
    (17) S0 -> . AUS LPAREN E OUTPUT RPAREN
    (18) S0 -> . GSUB ID
    (19) S0 -> . WENN CONDITION DANN S SW SD ENDE
    (20) S0 -> . WAHREND CONDITION S ENDE
    (21) S0 -> . TUN S WAHREND CONDITION
    (22) S0 -> .
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

  ! shift/reduce conflict for EIN resolved as shift
  ! shift/reduce conflict for AUS resolved as shift
  ! shift/reduce conflict for GSUB resolved as shift
  ! shift/reduce conflict for WENN resolved as shift
  ! shift/reduce conflict for WAHREND resolved as shift
  ! shift/reduce conflict for TUN resolved as shift
  ! reduce/reduce conflict for ENDE resolved using rule 14 (S -> .)
  ! shift/reduce conflict for ID resolved as shift
    ENDE            reduce using rule 14 (S -> .)
    EIN             shift and go to state 23
    AUS             shift and go to state 24
    GSUB            shift and go to state 25
    WENN            shift and go to state 27
    WAHREND         shift and go to state 28
    TUN             shift and go to state 29
    ID              shift and go to state 26

  ! EIN             [ reduce using rule 22 (S0 -> .) ]
  ! AUS             [ reduce using rule 22 (S0 -> .) ]
  ! GSUB            [ reduce using rule 22 (S0 -> .) ]
  ! WENN            [ reduce using rule 22 (S0 -> .) ]
  ! WAHREND         [ reduce using rule 22 (S0 -> .) ]
  ! TUN             [ reduce using rule 22 (S0 -> .) ]
  ! ID              [ reduce using rule 22 (S0 -> .) ]
  ! ENDE            [ reduce using rule 22 (S0 -> .) ]

    S                              shift and go to state 131
    S0                             shift and go to state 21
    IDORAMC                        shift and go to state 22

state 127

    (39) SW -> SWENN CONDITION DANN . S SW
    (13) S -> . S0 S
    (14) S -> .
    (15) S0 -> . IDORAMC ASSIGN E
    (16) S0 -> . EIN LPAREN IDORAMC INPUT RPAREN
    (17) S0 -> . AUS LPAREN E OUTPUT RPAREN
    (18) S0 -> . GSUB ID
    (19) S0 -> . WENN CONDITION DANN S SW SD ENDE
    (20) S0 -> . WAHREND CONDITION S ENDE
    (21) S0 -> . TUN S WAHREND CONDITION
    (22) S0 -> .
    (23) IDORAMC -> . ID
    (24) IDORAMC -> . ID AMC1

  ! shift/reduce conflict for EIN resolved as shift
  ! shift/reduce conflict for AUS resolved as shift
  ! shift/reduce conflict for GSUB resolved as shift
  ! shift/reduce conflict for WENN resolved as shift
  ! shift/reduce conflict for WAHREND resolved as shift
  ! shift/reduce conflict for TUN resolved as shift
  ! reduce/reduce conflict for SWENN resolved using rule 14 (S -> .)
  ! reduce/reduce conflict for SONNST resolved using rule 14 (S -> .)
  ! reduce/reduce conflict for ENDE resolved using rule 14 (S -> .)
  ! shift/reduce conflict for ID resolved as shift
    SWENN           reduce using rule 14 (S -> .)
    SONNST          reduce using rule 14 (S -> .)
    ENDE            reduce using rule 14 (S -> .)
    EIN             shift and go to state 23
    AUS             shift and go to state 24
    GSUB            shift and go to state 25
    WENN            shift and go to state 27
    WAHREND         shift and go to state 28
    TUN             shift and go to state 29
    ID              shift and go to state 26

  ! EIN             [ reduce using rule 22 (S0 -> .) ]
  ! AUS             [ reduce using rule 22 (S0 -> .) ]
  ! GSUB            [ reduce using rule 22 (S0 -> .) ]
  ! WENN            [ reduce using rule 22 (S0 -> .) ]
  ! WAHREND         [ reduce using rule 22 (S0 -> .) ]
  ! TUN             [ reduce using rule 22 (S0 -> .) ]
  ! ID              [ reduce using rule 22 (S0 -> .) ]
  ! SWENN           [ reduce using rule 22 (S0 -> .) ]
  ! SONNST          [ reduce using rule 22 (S0 -> .) ]
  ! ENDE            [ reduce using rule 22 (S0 -> .) ]

    S                              shift and go to state 132
    S0                             shift and go to state 21
    IDORAMC                        shift and go to state 22

state 128

    (75) AMC3 -> LBRKT . VALUE RBRKT
    (76) AMC3 -> LBRKT . ID RBRKT

    VALUE           shift and go to state 133
    ID              shift and go to state 134


state 129

    (70) AMC2 -> LBRKT VALUE RBRKT AMC3 .

    ASSIGN          reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    COMMA           reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    RPAREN          reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    GT              reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    GE              reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    EQ              reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    NE              reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    LE              reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    LT              reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    DIM             reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    SUB             reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    BEGIN           reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    EIN             reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    AUS             reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    GSUB            reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    WENN            reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    WAHREND         reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    TUN             reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    ID              reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    SCHLUSS         reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    RUKKHER         reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    ENDE            reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    SWENN           reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    SONNST          reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    PLUS            reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    TIMES           reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    MINUS           reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    DIVIDE          reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)
    MODULO          reduce using rule 70 (AMC2 -> LBRKT VALUE RBRKT AMC3 .)


state 130

    (71) AMC2 -> LBRKT ID RBRKT AMC3 .

    ASSIGN          reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    COMMA           reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    RPAREN          reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    GT              reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    GE              reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    EQ              reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    NE              reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    LE              reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    LT              reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    DIM             reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    SUB             reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    BEGIN           reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    EIN             reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    AUS             reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    GSUB            reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    WENN            reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    WAHREND         reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    TUN             reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    ID              reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    SCHLUSS         reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    RUKKHER         reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    ENDE            reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    SWENN           reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    SONNST          reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    PLUS            reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    TIMES           reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    MINUS           reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    DIVIDE          reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)
    MODULO          reduce using rule 71 (AMC2 -> LBRKT ID RBRKT AMC3 .)


state 131

    (41) SD -> SONNST DANN S .

    ENDE            reduce using rule 41 (SD -> SONNST DANN S .)


state 132

    (39) SW -> SWENN CONDITION DANN S . SW
    (39) SW -> . SWENN CONDITION DANN S SW
    (40) SW -> .

    SWENN           shift and go to state 113
    SONNST          reduce using rule 40 (SW -> .)
    ENDE            reduce using rule 40 (SW -> .)

    SW                             shift and go to state 135

state 133

    (75) AMC3 -> LBRKT VALUE . RBRKT

    RBRKT           shift and go to state 136


state 134

    (76) AMC3 -> LBRKT ID . RBRKT

    RBRKT           shift and go to state 137


state 135

    (39) SW -> SWENN CONDITION DANN S SW .

    SONNST          reduce using rule 39 (SW -> SWENN CONDITION DANN S SW .)
    ENDE            reduce using rule 39 (SW -> SWENN CONDITION DANN S SW .)


state 136

    (75) AMC3 -> LBRKT VALUE RBRKT .

    ASSIGN          reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    COMMA           reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    RPAREN          reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    GT              reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    GE              reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    EQ              reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    NE              reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    LE              reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    LT              reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    DIM             reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    SUB             reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    BEGIN           reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    EIN             reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    AUS             reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    GSUB            reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    WENN            reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    WAHREND         reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    TUN             reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    ID              reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    SCHLUSS         reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    RUKKHER         reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    ENDE            reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    SWENN           reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    SONNST          reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    PLUS            reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    TIMES           reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    MINUS           reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    DIVIDE          reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)
    MODULO          reduce using rule 75 (AMC3 -> LBRKT VALUE RBRKT .)


state 137

    (76) AMC3 -> LBRKT ID RBRKT .

    ASSIGN          reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    COMMA           reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    RPAREN          reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    GT              reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    GE              reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    EQ              reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    NE              reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    LE              reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    LT              reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    DIM             reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    SUB             reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    BEGIN           reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    EIN             reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    AUS             reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    GSUB            reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    WENN            reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    WAHREND         reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    TUN             reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    ID              reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    SCHLUSS         reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    RUKKHER         reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    ENDE            reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    SWENN           reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    SONNST          reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    PLUS            reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    TIMES           reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    MINUS           reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    DIVIDE          reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)
    MODULO          reduce using rule 76 (AMC3 -> LBRKT ID RBRKT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EIN in state 12 resolved as shift
WARNING: shift/reduce conflict for AUS in state 12 resolved as shift
WARNING: shift/reduce conflict for GSUB in state 12 resolved as shift
WARNING: shift/reduce conflict for WENN in state 12 resolved as shift
WARNING: shift/reduce conflict for WAHREND in state 12 resolved as shift
WARNING: shift/reduce conflict for TUN in state 12 resolved as shift
WARNING: shift/reduce conflict for ID in state 12 resolved as shift
WARNING: shift/reduce conflict for WAHREND in state 21 resolved as shift
WARNING: shift/reduce conflict for EIN in state 21 resolved as shift
WARNING: shift/reduce conflict for AUS in state 21 resolved as shift
WARNING: shift/reduce conflict for GSUB in state 21 resolved as shift
WARNING: shift/reduce conflict for WENN in state 21 resolved as shift
WARNING: shift/reduce conflict for WAHREND in state 21 resolved as shift
WARNING: shift/reduce conflict for TUN in state 21 resolved as shift
WARNING: shift/reduce conflict for ID in state 21 resolved as shift
WARNING: shift/reduce conflict for WAHREND in state 29 resolved as shift
WARNING: shift/reduce conflict for EIN in state 29 resolved as shift
WARNING: shift/reduce conflict for AUS in state 29 resolved as shift
WARNING: shift/reduce conflict for GSUB in state 29 resolved as shift
WARNING: shift/reduce conflict for WENN in state 29 resolved as shift
WARNING: shift/reduce conflict for WAHREND in state 29 resolved as shift
WARNING: shift/reduce conflict for TUN in state 29 resolved as shift
WARNING: shift/reduce conflict for ID in state 29 resolved as shift
WARNING: shift/reduce conflict for EIN in state 45 resolved as shift
WARNING: shift/reduce conflict for AUS in state 45 resolved as shift
WARNING: shift/reduce conflict for GSUB in state 45 resolved as shift
WARNING: shift/reduce conflict for WENN in state 45 resolved as shift
WARNING: shift/reduce conflict for WAHREND in state 45 resolved as shift
WARNING: shift/reduce conflict for TUN in state 45 resolved as shift
WARNING: shift/reduce conflict for ID in state 45 resolved as shift
WARNING: shift/reduce conflict for EIN in state 63 resolved as shift
WARNING: shift/reduce conflict for AUS in state 63 resolved as shift
WARNING: shift/reduce conflict for GSUB in state 63 resolved as shift
WARNING: shift/reduce conflict for WENN in state 63 resolved as shift
WARNING: shift/reduce conflict for WAHREND in state 63 resolved as shift
WARNING: shift/reduce conflict for TUN in state 63 resolved as shift
WARNING: shift/reduce conflict for ID in state 63 resolved as shift
WARNING: shift/reduce conflict for AND in state 90 resolved as shift
WARNING: shift/reduce conflict for OR in state 90 resolved as shift
WARNING: shift/reduce conflict for AND in state 91 resolved as shift
WARNING: shift/reduce conflict for OR in state 91 resolved as shift
WARNING: shift/reduce conflict for EIN in state 126 resolved as shift
WARNING: shift/reduce conflict for AUS in state 126 resolved as shift
WARNING: shift/reduce conflict for GSUB in state 126 resolved as shift
WARNING: shift/reduce conflict for WENN in state 126 resolved as shift
WARNING: shift/reduce conflict for WAHREND in state 126 resolved as shift
WARNING: shift/reduce conflict for TUN in state 126 resolved as shift
WARNING: shift/reduce conflict for ID in state 126 resolved as shift
WARNING: shift/reduce conflict for EIN in state 127 resolved as shift
WARNING: shift/reduce conflict for AUS in state 127 resolved as shift
WARNING: shift/reduce conflict for GSUB in state 127 resolved as shift
WARNING: shift/reduce conflict for WENN in state 127 resolved as shift
WARNING: shift/reduce conflict for WAHREND in state 127 resolved as shift
WARNING: shift/reduce conflict for TUN in state 127 resolved as shift
WARNING: shift/reduce conflict for ID in state 127 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (S -> <empty>)
WARNING: rejected rule (S0 -> <empty>) in state 12
WARNING: reduce/reduce conflict in state 21 resolved using rule (S -> <empty>)
WARNING: rejected rule (S0 -> <empty>) in state 21
WARNING: reduce/reduce conflict in state 26 resolved using rule (IDORAMC -> ID)
WARNING: rejected rule (AMC1 -> <empty>) in state 26
WARNING: reduce/reduce conflict in state 32 resolved using rule (AMC0 -> <empty>)
WARNING: rejected rule (AMC1 -> <empty>) in state 32
WARNING: reduce/reduce conflict in state 45 resolved using rule (S -> <empty>)
WARNING: rejected rule (S0 -> <empty>) in state 45
WARNING: reduce/reduce conflict in state 58 resolved using rule (EIDORAMC -> ID)
WARNING: rejected rule (AMC1 -> <empty>) in state 58
WARNING: reduce/reduce conflict in state 58 resolved using rule (IDORAMC -> ID)
WARNING: rejected rule (AMC1 -> <empty>) in state 58
WARNING: reduce/reduce conflict in state 63 resolved using rule (S -> <empty>)
WARNING: rejected rule (S0 -> <empty>) in state 63
WARNING: reduce/reduce conflict in state 87 resolved using rule (AMC1 -> LBRKT VALUE RBRKT)
WARNING: rejected rule (AMC2 -> <empty>) in state 87
WARNING: reduce/reduce conflict in state 88 resolved using rule (AMC1 -> LBRKT ID RBRKT)
WARNING: rejected rule (AMC2 -> <empty>) in state 88
WARNING: reduce/reduce conflict in state 123 resolved using rule (AMC2 -> LBRKT VALUE RBRKT)
WARNING: rejected rule (AMC3 -> <empty>) in state 123
WARNING: reduce/reduce conflict in state 124 resolved using rule (AMC2 -> LBRKT ID RBRKT)
WARNING: rejected rule (AMC3 -> <empty>) in state 124
WARNING: reduce/reduce conflict in state 126 resolved using rule (S -> <empty>)
WARNING: rejected rule (S0 -> <empty>) in state 126
WARNING: reduce/reduce conflict in state 127 resolved using rule (S -> <empty>)
WARNING: rejected rule (S0 -> <empty>) in state 127
WARNING: Rule (S0 -> <empty>) is never reduced
WARNING: Rule (AMC1 -> <empty>) is never reduced
WARNING: Rule (AMC2 -> <empty>) is never reduced
WARNING: Rule (AMC3 -> <empty>) is never reduced
